{{$an:=.Name.Fmt}}{{.Desc.Comment .Name.Fmt}}type {{.Name.Fmt}} zcl.{{.Type.Type}}
{{if .ID}}const {{$an}}Attr zcl.AttrID = {{.ID.Uint}}
func ({{$an}}) ID() zcl.AttrID { return {{$an}}Attr }
func ({{$an}}) Readable() bool { return {{if .CanRead}}true{{else}}false{{end}} }
func ({{$an}}) Writable() bool { return {{if .CanWrite}}true{{else}}false{{end}} }
func ({{$an}}) Reportable() bool { return {{if .Report}}true{{else}}false{{end}} }
func ({{$an}}) SceneIndex() int { return {{if .Scene}}{{.Scene}}{{else}}-1{{end}} }
{{end}}
func ({{$an}}) Name() string { return "{{.Name}}" }
func (a *{{$an}}) TypeID() zcl.TypeID { return zcl.{{.Type.Type}}(*a).ID() }
func (a *{{$an}}) Value() zcl.Val { return a }
func (a {{$an}}) MarshalZcl() ([]byte, error) { {{if .ArrayType}}
    return nil, zcl.Errorf("not implemented")
{{else}}return zcl.{{.Type.Type}}(a).MarshalZcl(){{end}} }


func (a *{{$an}}) UnmarshalZcl(b []byte) ([]byte, error) {
    nt := new(zcl.{{.Type.Type}})
    br, err := nt.UnmarshalZcl(b)
    *a = {{.Name.Fmt}}(*nt)
    return br, err
}

func (a *{{$an}}) SetValue(v zcl.Val) error {
    if nv, ok := v.(*zcl.{{.Type.Type}}); ok {
        *a = {{$an}}(*nv)
        return nil
    }
    return zcl.ErrInvalidType
}

func (a {{$an}}) String() string { {{if .Values}}switch a { {{range $vk,$vv := .Values}}
        case {{$vk}}: return "{{$vv}}"{{end}}
    }{{end}}{{if .Bits}}
    var bstr []string
    bits := zcl.BitmapList(a[:])
    for _, bit := range bits {
        switch bit { {{range $vk,$vv := .Bits}}
            case {{$vk}}: bstr = append(bstr, "{{$vv}}") {{end}}
            default: bstr = append(bstr, zcl.Sprintf("Unknown(%d)", bit))
        }
    }
    return zcl.StrJoin(bstr, ", "){{else if eq .Unit "s"}}
    return zcl.Seconds.Format(float64(a){{if .Multiplier}}/{{.Multiplier}}{{end}}){{else if .Unit}}
    return zcl.{{.Unit}}.Format(float64(a){{if .Multiplier}}/{{.Multiplier}}{{end}}){{else}}
    return zcl.Sprintf("%v", zcl.{{.Type.Type}}(a)){{end}}
}

{{range $vk,$vv := .Bits}}
func (a {{$an}}) Is{{$vv.Fmt}}() bool { return zcl.BitmapTest([]byte(a[:]), {{$vk}}) }{{end}}{{range $vk,$vv := .Bits}}
func (a *{{$an}}) Set{{$vv.Fmt}}(b bool) { copy((*a)[:], zcl.BitmapSet([]byte((*a)[:]), {{$vk}}, b)) } {{end}}

{{if .Bits}}func({{$an}}) MultiOptions() []zcl.Option {
    return []zcl.Option{ {{range $vk,$vv := .Bits}}
        {Value: {{$vk}}, Name: "{{$vv}}"},{{end}}
    }
}{{end}}

{{range $vk,$vv := .Values}}
func (a {{$an}}) Is{{$vv.Fmt}}() bool { return a == {{$vk}} }{{end}}{{range $vk,$vv := .Values}}
func (a *{{$an}}) Set{{$vv.Fmt}}() { *a = {{$vk}} }{{end}}

{{if .Values}}func({{$an}}) SingleOptions() []zcl.Option {
    return []zcl.Option{ {{range $vk,$vv := .Values}}
        {Value: {{$vk}}, Name: "{{$vv}}"},{{end}}
    }
}{{end}}
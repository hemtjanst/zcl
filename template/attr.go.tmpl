{{$an:=.Name.Fmt}}{{$attr:=.}}
{{if .ID}}const {{$an}}Attr zcl.AttrID = {{.ID.Uint}}
func ({{$an}}) ID() zcl.AttrID { return {{$an}}Attr }
func ({{$an}}) Readable() bool { return {{if .CanRead}}true{{else}}false{{end}} }
func ({{$an}}) Writable() bool { return {{if .CanWrite}}true{{else}}false{{end}} }
func ({{$an}}) Reportable() bool { return {{if .Report}}true{{else}}false{{end}} }
func ({{$an}}) SceneIndex() int { return {{if .Scene}}{{.Scene}}{{else}}-1{{end}} }

// Implements AttrDef/AttrValue interfaces
func (v {{$an}}) AttrID() zcl.AttrID { return v.ID() }
func (v {{$an}}) AttrType() zcl.TypeID { return v.TypeID() }
func (v *{{$an}}) AttrValue() zcl.Val { return v.Value() }
{{end}}
func ({{$an}}) Name() string { return {{strEsc .Name}} }
func ({{$an}}) Description() string { return {{strEsc .Desc}} }

{{.Desc.Comment .Name.Fmt}}{{ if eq .Type "local" }}
type {{.Name.Fmt}} struct { {{range .StructAttr}}
    {{.Desc.Comment .ArgNameFmt}}{{.ArgNameFmt}} {{if .Name}}{{.Name.Fmt}}{{else}}{{.Type.RealType}}{{end}}{{end}}
}
func (v *{{$an}}) TypeID() zcl.TypeID { return zcl.TypeID(76) } // struct
func (v *{{$an}}) Value() zcl.Val { return v }
func (v {{$an}}) MarshalZcl() ([]byte, error) { {{if .StructAttr}}
    var data []byte
    var tmp []byte
    tmp2 := uint32(0)
    var err error
    _ = tmp2
    _ = err
    {{range .StructAttr}}
        {{if .Cond}}{{condDesc .ArgNameFmt .Cond}}if {{joinCond $attr.StructAttr .Cond}} { {{else}} { {{end}}{{if .Marshal}}
        {{.Marshal}}{{else}}
        if tmp, err = v.{{.ArgNameFmt}}.MarshalZcl(); err != nil {
        return nil, err
        }{{end}}
        data = append(data, tmp...)
    } {{end}}
    return data, nil {{ else }}
    return nil, nil {{ end }}
}

func (v *{{$an}}) UnmarshalZcl(b []byte) ([]byte, error) { {{if .StructAttr}}
    var err error
    tmp2 := uint32(0)
    _ = tmp2
    _ = err
    {{range .StructAttr}}
        {{if .Cond}}{{condDesc .ArgNameFmt .Cond}}if {{joinCond $attr.StructAttr .Cond}} { {{end}}{{if .Unmarshal}}
        {{.Unmarshal}}{{else}}if b, err = {{if .Name}}(&v.{{.ArgNameFmt}}){{else}}new(zcl.{{.Type.Type}}){{end}}.UnmarshalZcl(b); err != nil {
        return b, err
        }{{end}}
        {{if .Cond}} } {{end}}
    {{end}}
{{ end }}return b, nil
}

func (v *{{$an}}) SetValue(a zcl.Val) error {
    if nv, ok := a.(*{{$an}}); ok {
        *v = *nv
        return nil
    }
    return zcl.ErrNotImpl
}

func (v *{{$an}}) String() string {
    return zcl.Sprintf(
        "{{.Name.Fmt}}{" + zcl.StrJoin([]string{ {{range .StructAttr}}{{if .Name}}
            "{{.ArgNameFmt}}(%v)",{{end}}{{end}}
        }, " ")+"}", {{range .StructAttr}}{{if .Name}}
        v.{{.ArgNameFmt}},{{end}}{{end}}
    )
}

{{else}}type {{.Name.Fmt}} {{ if .ArrayType}}[]*{{.ArrayType.RealType}}{{else}}{{.Type.RealType}}{{end}}

func (v *{{$an}}) TypeID() zcl.TypeID { return new({{.Type.RealType}}).TypeID() }
func (v *{{$an}}) Value() zcl.Val { return v }

{{ if .ArrayType}}
func ({{$an}}) ArrayTypeID() zcl.TypeID { return new({{.ArrayType.RealType}}).TypeID() }

func (v *{{$an}}) ArrayValues() (o []{{.ArrayType.Native}}) {
    for _, a := range *v {
        o = append(o, {{if eq .ArrayType.RealType .ArrayType.Native}}*a{{else}}{{.ArrayType.Native}}(*a){{end}})
    }
    return o
}

func (v *{{$an}}) SetValues(val []{{.ArrayType.Native}}) error {
    *v = []*{{.ArrayType.RealType}}{}
    return v.AddValues(val...)
}

func (v *{{$an}}) AddValues(val ...{{.ArrayType.Native}}) error {
    for _, a := range val {
        nv := {{if eq .ArrayType.RealType .ArrayType.Native}}a{{else}}{{.ArrayType.RealType}}(a){{end}}
        *v = append(*v, &nv)
    }
    return nil
}

func (v {{$an}}) MarshalZcl() ([]byte, error) {
    var vars []zcl.Val
    for _, a := range v {
        vars = append(vars, a)
    }
    return zcl.ArrayNoTypeMarshalZcl("sloc", vars)
}

func (v *{{$an}}) UnmarshalZcl(b []byte) ([]byte, error) {
    *v = []*{{.ArrayType.RealType}}{}
    return zcl.UnmarshalList("sloc", b, func() zcl.Val {
        nv := new({{.ArrayType.RealType}})
        *v = append(*v, nv)
        return nv
    })
}

func (v *{{$an}}) SetValue(a zcl.Val) error {
    if nv, ok := a.(*{{$an}}); ok {
        *v = *nv
        return nil
    }
    return zcl.ErrInvalidType
}


func (v {{$an}}) String() string {
    var s []string
    for _, a := range v {
        s = append(s, zcl.Sprintf("%v", a))
    }
    return "["+zcl.StrJoin(s, ",")+"]"
}

{{ else }}
func (v {{$an}}) MarshalZcl() ([]byte, error) { return {{.Type.RealType}}(v).MarshalZcl() }

func (v *{{$an}}) UnmarshalZcl(b []byte) ([]byte, error) {
    nt := new({{.Type.RealType}})
    br, err := nt.UnmarshalZcl(b)
    *v = {{.Name.Fmt}}(*nt)
    return br, err
}

func (v {{$an}}) MarshalJSON() ([]byte, error) {
    return zcl.ToJson({{.Type.RealType}}(v))
}

func (v *{{$an}}) UnmarshalJSON(b []byte) error {
    a := new({{.Type.RealType}})
    if err := zcl.ParseJson(b, a); err != nil {
        return err
    }
    *v = {{$an}}(*a)
    return nil
}

func (v *{{$an}}) SetValue(a zcl.Val) error {
    if nv, ok := a.(*{{.Type.RealType}}); ok {
        *v = {{$an}}(*nv)
        return nil
    }
    return zcl.ErrInvalidType
}

func (v {{$an}}) String() string { {{if .Values}}switch v { {{range $vk,$vv := .Values}}
        case {{$vk}}: return "{{$vv}}"{{end}}
    }{{end}}{{if .Bits}}
    var bstr []string
    bits := zcl.BitmapList(v[:])
    for _, bit := range bits {
        switch bit { {{range $vk,$vv := .Bits}}
            case {{$vk}}: bstr = append(bstr, "{{$vv}}") {{end}}
            default: bstr = append(bstr, zcl.Sprintf("Unknown(%d)", bit))
        }
    }
    return zcl.StrJoin(bstr, ", "){{else if eq .Unit "s"}}
    return zcl.Seconds.Format(float64(v){{if .Multiplier}}/{{.Multiplier}}{{end}}){{else if .Unit}}
    return zcl.{{.Unit}}.Format(float64(v){{if .Multiplier}}/{{.Multiplier}}{{end}}){{else}}
    return zcl.Sprintf("%v", {{.Type.RealType}}(v)){{end}}
}

{{if .Multiplier}}func (v {{$an}}) Scaled() float64 {
    return float64(v)/{{.Multiplier}}
}{{else if eq .Type "bool"}}func (v {{$an}}) Scaled() float64 {
    return float64(v)
}{{end}}

{{range $vk,$vv := .Bits}}
func (v {{$an}}) Is{{$vv.Fmt}}() bool { return zcl.BitmapTest([]byte(v[:]), {{$vk}}) }{{end}}{{range $vk,$vv := .Bits}}
func (v *{{$an}}) Set{{$vv.Fmt}}(b bool) { copy((*v)[:], zcl.BitmapSet([]byte((*v)[:]), {{$vk}}, b)) } {{end}}

{{if .Bits}}func({{$an}}) MultiOptions() []zcl.Option {
    return []zcl.Option{ {{range $vk,$vv := .Bits}}
        {Value: {{$vk}}, Name: "{{$vv}}"},{{end}}
    }
}{{end}}

{{range $vk,$vv := .Values}}
func (v {{$an}}) Is{{$vv.Fmt}}() bool { return v == {{$vk}} }{{end}}{{range $vk,$vv := .Values}}
func (v *{{$an}}) Set{{$vv.Fmt}}() { *v = {{$vk}} }{{end}}

{{if .Values}}func({{$an}}) SingleOptions() []zcl.Option {
    return []zcl.Option{ {{range $vk,$vv := .Values}}
        {Value: {{$vk}}, Name: "{{$vv}}"},{{end}}
    }
}{{end}}
{{end}}

{{ end }}

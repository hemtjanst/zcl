// Attributes and commands.
package green_power

import (
	"neotor.se/zcl"
)

// GreenPower
const GreenPowerID zcl.ClusterID = 33

var GreenPowerCluster = zcl.Cluster{
	ServerCmd: map[zcl.CommandID]func() zcl.Command{},
	ClientCmd: map[zcl.CommandID]func() zcl.Command{},
	ServerAttr: map[zcl.AttrID]func() zcl.Attr{
		MaxSinkTableEntriesAttr:   func() zcl.Attr { return new(MaxSinkTableEntries) },
		SinkTableAttr:             func() zcl.Attr { return new(SinkTable) },
		CommunicationModeAttr:     func() zcl.Attr { return new(CommunicationMode) },
		CommissioningExitModeAttr: func() zcl.Attr { return new(CommissioningExitMode) },
		CommissioningWindowAttr:   func() zcl.Attr { return new(CommissioningWindow) },
		SecurityLevelAttr:         func() zcl.Attr { return new(SecurityLevel) },
		FunctionalityAttr:         func() zcl.Attr { return new(Functionality) },
		ActiveFunctionalityAttr:   func() zcl.Attr { return new(ActiveFunctionality) },
	},
	ClientAttr: map[zcl.AttrID]func() zcl.Attr{},
	SceneAttr:  []zcl.AttrID{},
}

// MaxSinkTableEntries is an autogenerated attribute in the GreenPower cluster
// Maximum number of Sink Table entries supported by this device.
type MaxSinkTableEntries zcl.Zu8

const MaxSinkTableEntriesAttr zcl.AttrID = 0

func (MaxSinkTableEntries) ID() zcl.AttrID                 { return MaxSinkTableEntriesAttr }
func (MaxSinkTableEntries) Cluster() zcl.ClusterID         { return GreenPowerID }
func (MaxSinkTableEntries) Name() string                   { return "Max Sink Table Entries" }
func (MaxSinkTableEntries) Readable() bool                 { return true }
func (MaxSinkTableEntries) Writable() bool                 { return false }
func (MaxSinkTableEntries) Reportable() bool               { return false }
func (MaxSinkTableEntries) SceneIndex() int                { return -1 }
func (a *MaxSinkTableEntries) Value() *MaxSinkTableEntries { return a }
func (a MaxSinkTableEntries) MarshalZcl() ([]byte, error)  { return zcl.Zu8(a).MarshalZcl() }

func (a *MaxSinkTableEntries) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu8)
	br, err := nt.UnmarshalZcl(b)
	*a = MaxSinkTableEntries(*nt)
	return br, err
}

func (a MaxSinkTableEntries) String() string {
	return zcl.Sprintf("%v", zcl.Zu8(a))
}

// SinkTable is an autogenerated attribute in the GreenPower cluster
// Sink Table, holding information about local bindings between a particular GPD and targetâ€˜s local endpoints.
type SinkTable zcl.Zlostring

const SinkTableAttr zcl.AttrID = 1

func (SinkTable) ID() zcl.AttrID                { return SinkTableAttr }
func (SinkTable) Cluster() zcl.ClusterID        { return GreenPowerID }
func (SinkTable) Name() string                  { return "Sink Table" }
func (SinkTable) Readable() bool                { return true }
func (SinkTable) Writable() bool                { return false }
func (SinkTable) Reportable() bool              { return false }
func (SinkTable) SceneIndex() int               { return -1 }
func (a *SinkTable) Value() *SinkTable          { return a }
func (a SinkTable) MarshalZcl() ([]byte, error) { return zcl.Zlostring(a).MarshalZcl() }

func (a *SinkTable) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zlostring)
	br, err := nt.UnmarshalZcl(b)
	*a = SinkTable(*nt)
	return br, err
}

func (a SinkTable) String() string {
	return zcl.Sprintf("%v", zcl.Zlostring(a))
}

// CommunicationMode is an autogenerated attribute in the GreenPower cluster
// Default communication mode requested by this sink.
type CommunicationMode zcl.Zbmp8

const CommunicationModeAttr zcl.AttrID = 2

func (CommunicationMode) ID() zcl.AttrID                { return CommunicationModeAttr }
func (CommunicationMode) Cluster() zcl.ClusterID        { return GreenPowerID }
func (CommunicationMode) Name() string                  { return "Communication Mode" }
func (CommunicationMode) Readable() bool                { return true }
func (CommunicationMode) Writable() bool                { return true }
func (CommunicationMode) Reportable() bool              { return false }
func (CommunicationMode) SceneIndex() int               { return -1 }
func (a *CommunicationMode) Value() *CommunicationMode  { return a }
func (a CommunicationMode) MarshalZcl() ([]byte, error) { return zcl.Zbmp8(a).MarshalZcl() }

func (a *CommunicationMode) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbmp8)
	br, err := nt.UnmarshalZcl(b)
	*a = CommunicationMode(*nt)
	return br, err
}

func (a CommunicationMode) String() string {
	return zcl.Sprintf("%v", zcl.Zbmp8(a))
}

// CommissioningExitMode is an autogenerated attribute in the GreenPower cluster
// Conditions for the sink to exit the commissioning mode.
type CommissioningExitMode zcl.Zbmp8

const CommissioningExitModeAttr zcl.AttrID = 3

func (CommissioningExitMode) ID() zcl.AttrID                   { return CommissioningExitModeAttr }
func (CommissioningExitMode) Cluster() zcl.ClusterID           { return GreenPowerID }
func (CommissioningExitMode) Name() string                     { return "Commissioning Exit Mode" }
func (CommissioningExitMode) Readable() bool                   { return true }
func (CommissioningExitMode) Writable() bool                   { return true }
func (CommissioningExitMode) Reportable() bool                 { return false }
func (CommissioningExitMode) SceneIndex() int                  { return -1 }
func (a *CommissioningExitMode) Value() *CommissioningExitMode { return a }
func (a CommissioningExitMode) MarshalZcl() ([]byte, error)    { return zcl.Zbmp8(a).MarshalZcl() }

func (a *CommissioningExitMode) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbmp8)
	br, err := nt.UnmarshalZcl(b)
	*a = CommissioningExitMode(*nt)
	return br, err
}

func (a CommissioningExitMode) String() string {
	return zcl.Sprintf("%v", zcl.Zbmp8(a))
}

// CommissioningWindow is an autogenerated attribute in the GreenPower cluster
// Default duration of the Commissioning window duration, in seconds, as requested by this sink.
type CommissioningWindow zcl.Zu16

const CommissioningWindowAttr zcl.AttrID = 4

func (CommissioningWindow) ID() zcl.AttrID                 { return CommissioningWindowAttr }
func (CommissioningWindow) Cluster() zcl.ClusterID         { return GreenPowerID }
func (CommissioningWindow) Name() string                   { return "Commissioning Window" }
func (CommissioningWindow) Readable() bool                 { return true }
func (CommissioningWindow) Writable() bool                 { return true }
func (CommissioningWindow) Reportable() bool               { return false }
func (CommissioningWindow) SceneIndex() int                { return -1 }
func (a *CommissioningWindow) Value() *CommissioningWindow { return a }
func (a CommissioningWindow) MarshalZcl() ([]byte, error)  { return zcl.Zu16(a).MarshalZcl() }

func (a *CommissioningWindow) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = CommissioningWindow(*nt)
	return br, err
}

func (a CommissioningWindow) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

// SecurityLevel is an autogenerated attribute in the GreenPower cluster
// The minimum required security level to be supported by the paired GPDs.
type SecurityLevel zcl.Zbmp8

const SecurityLevelAttr zcl.AttrID = 5

func (SecurityLevel) ID() zcl.AttrID                { return SecurityLevelAttr }
func (SecurityLevel) Cluster() zcl.ClusterID        { return GreenPowerID }
func (SecurityLevel) Name() string                  { return "Security Level" }
func (SecurityLevel) Readable() bool                { return true }
func (SecurityLevel) Writable() bool                { return true }
func (SecurityLevel) Reportable() bool              { return false }
func (SecurityLevel) SceneIndex() int               { return -1 }
func (a *SecurityLevel) Value() *SecurityLevel      { return a }
func (a SecurityLevel) MarshalZcl() ([]byte, error) { return zcl.Zbmp8(a).MarshalZcl() }

func (a *SecurityLevel) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbmp8)
	br, err := nt.UnmarshalZcl(b)
	*a = SecurityLevel(*nt)
	return br, err
}

func (a SecurityLevel) String() string {
	return zcl.Sprintf("%v", zcl.Zbmp8(a))
}

// Functionality is an autogenerated attribute in the GreenPower cluster
// The optional GP functionality supported by this sink.
type Functionality zcl.Zbmp24

const FunctionalityAttr zcl.AttrID = 6

func (Functionality) ID() zcl.AttrID                { return FunctionalityAttr }
func (Functionality) Cluster() zcl.ClusterID        { return GreenPowerID }
func (Functionality) Name() string                  { return "Functionality" }
func (Functionality) Readable() bool                { return true }
func (Functionality) Writable() bool                { return false }
func (Functionality) Reportable() bool              { return false }
func (Functionality) SceneIndex() int               { return -1 }
func (a *Functionality) Value() *Functionality      { return a }
func (a Functionality) MarshalZcl() ([]byte, error) { return zcl.Zbmp24(a).MarshalZcl() }

func (a *Functionality) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbmp24)
	br, err := nt.UnmarshalZcl(b)
	*a = Functionality(*nt)
	return br, err
}

func (a Functionality) String() string {
	return zcl.Sprintf("%v", zcl.Zbmp24(a))
}

// ActiveFunctionality is an autogenerated attribute in the GreenPower cluster
// The optional GP functionality supported by this sink that is active.
type ActiveFunctionality zcl.Zbmp24

const ActiveFunctionalityAttr zcl.AttrID = 7

func (ActiveFunctionality) ID() zcl.AttrID                 { return ActiveFunctionalityAttr }
func (ActiveFunctionality) Cluster() zcl.ClusterID         { return GreenPowerID }
func (ActiveFunctionality) Name() string                   { return "Active Functionality" }
func (ActiveFunctionality) Readable() bool                 { return true }
func (ActiveFunctionality) Writable() bool                 { return false }
func (ActiveFunctionality) Reportable() bool               { return false }
func (ActiveFunctionality) SceneIndex() int                { return -1 }
func (a *ActiveFunctionality) Value() *ActiveFunctionality { return a }
func (a ActiveFunctionality) MarshalZcl() ([]byte, error)  { return zcl.Zbmp24(a).MarshalZcl() }

func (a *ActiveFunctionality) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbmp24)
	br, err := nt.UnmarshalZcl(b)
	*a = ActiveFunctionality(*nt)
	return br, err
}

func (a ActiveFunctionality) String() string {
	return zcl.Sprintf("%v", zcl.Zbmp24(a))
}

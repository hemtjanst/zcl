// Attributes and commands for debugging purposes.
package hvac

import (
	"neotor.se/zcl"
)

// DeDebug
const DeDebugID zcl.ClusterID = 56898

var DeDebugCluster = zcl.Cluster{
	ServerCmd: map[zcl.CommandID]func() zcl.Command{},
	ClientCmd: map[zcl.CommandID]func() zcl.Command{},
	ServerAttr: map[zcl.AttrID]func() zcl.Attr{
		DebugEnabledAttr:     func() zcl.Attr { return new(DebugEnabled) },
		DebugDestinationAttr: func() zcl.Attr { return new(DebugDestination) },
	},
	ClientAttr: map[zcl.AttrID]func() zcl.Attr{},
	SceneAttr:  []zcl.AttrID{},
}

// DebugEnabled is an autogenerated attribute in the DeDebug cluster
type DebugEnabled zcl.Zbool

const DebugEnabledAttr zcl.AttrID = 0

func (DebugEnabled) ID() zcl.AttrID                { return DebugEnabledAttr }
func (DebugEnabled) Cluster() zcl.ClusterID        { return DeDebugID }
func (DebugEnabled) Name() string                  { return "Debug enabled" }
func (DebugEnabled) Readable() bool                { return true }
func (DebugEnabled) Writable() bool                { return true }
func (DebugEnabled) Reportable() bool              { return false }
func (DebugEnabled) SceneIndex() int               { return -1 }
func (a *DebugEnabled) Value() *DebugEnabled       { return a }
func (a DebugEnabled) MarshalZcl() ([]byte, error) { return zcl.Zbool(a).MarshalZcl() }

func (a *DebugEnabled) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbool)
	br, err := nt.UnmarshalZcl(b)
	*a = DebugEnabled(*nt)
	return br, err
}

func (a DebugEnabled) String() string {
	return zcl.Sprintf("%v", zcl.Zbool(a))
}

// DebugDestination is an autogenerated attribute in the DeDebug cluster
type DebugDestination zcl.Zu16

const DebugDestinationAttr zcl.AttrID = 1

func (DebugDestination) ID() zcl.AttrID                { return DebugDestinationAttr }
func (DebugDestination) Cluster() zcl.ClusterID        { return DeDebugID }
func (DebugDestination) Name() string                  { return "Debug destination" }
func (DebugDestination) Readable() bool                { return true }
func (DebugDestination) Writable() bool                { return true }
func (DebugDestination) Reportable() bool              { return false }
func (DebugDestination) SceneIndex() int               { return -1 }
func (a *DebugDestination) Value() *DebugDestination   { return a }
func (a DebugDestination) MarshalZcl() ([]byte, error) { return zcl.Zu16(a).MarshalZcl() }

func (a *DebugDestination) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = DebugDestination(*nt)
	return br, err
}

func (a DebugDestination) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

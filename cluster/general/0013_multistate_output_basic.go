package general

import (
	"neotor.se/zcl"
)

// MultistateOutputBasic
const MultistateOutputBasicID zcl.ClusterID = 19

var MultistateOutputBasicCluster = zcl.Cluster{
	ServerCmd: map[zcl.CommandID]func() zcl.Command{},
	ClientCmd: map[zcl.CommandID]func() zcl.Command{},
	ServerAttr: map[zcl.AttrID]func() zcl.Attr{
		MultiOutputStateTextAttr:         func() zcl.Attr { return new(MultiOutputStateText) },
		MultiOutputDescriptionAttr:       func() zcl.Attr { return new(MultiOutputDescription) },
		MultiOutputNumberOfStatesAttr:    func() zcl.Attr { return new(MultiOutputNumberOfStates) },
		MultiOutputOutOfServiceAttr:      func() zcl.Attr { return new(MultiOutputOutOfService) },
		MultiOutputPresentValueAttr:      func() zcl.Attr { return new(MultiOutputPresentValue) },
		MultiOutputPriorityArrayAttr:     func() zcl.Attr { return new(MultiOutputPriorityArray) },
		MultiOutputReliabilityAttr:       func() zcl.Attr { return new(MultiOutputReliability) },
		MultiOutputRelinquishDefaultAttr: func() zcl.Attr { return new(MultiOutputRelinquishDefault) },
		MultiOutputStatusFlagsAttr:       func() zcl.Attr { return new(MultiOutputStatusFlags) },
		MultiOutputApplicationTypeAttr:   func() zcl.Attr { return new(MultiOutputApplicationType) },
	},
	ClientAttr: map[zcl.AttrID]func() zcl.Attr{},
	SceneAttr:  []zcl.AttrID{},
}

// MultiOutputStateText is an autogenerated attribute in the MultistateOutputBasic cluster
type MultiOutputStateText zcl.Zcstring

const MultiOutputStateTextAttr zcl.AttrID = 14

func (a MultiOutputStateText) ID() zcl.AttrID                { return MultiOutputStateTextAttr }
func (a MultiOutputStateText) Cluster() zcl.ClusterID        { return MultistateOutputBasicID }
func (a *MultiOutputStateText) Value() *MultiOutputStateText { return a }
func (a MultiOutputStateText) MarshalZcl() ([]byte, error) {
	return zcl.Zcstring(a).MarshalZcl()
}
func (a *MultiOutputStateText) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zcstring)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiOutputStateText(*nt)
	return br, err
}

func (a MultiOutputStateText) Readable() bool   { return true }
func (a MultiOutputStateText) Writable() bool   { return true }
func (a MultiOutputStateText) Reportable() bool { return false }
func (a MultiOutputStateText) SceneIndex() int  { return -1 }

func (a MultiOutputStateText) String() string {
	return zcl.Sprintf("%s", zcl.Zcstring(a))
}

// MultiOutputDescription is an autogenerated attribute in the MultistateOutputBasic cluster
type MultiOutputDescription zcl.Zcstring

const MultiOutputDescriptionAttr zcl.AttrID = 28

func (a MultiOutputDescription) ID() zcl.AttrID                  { return MultiOutputDescriptionAttr }
func (a MultiOutputDescription) Cluster() zcl.ClusterID          { return MultistateOutputBasicID }
func (a *MultiOutputDescription) Value() *MultiOutputDescription { return a }
func (a MultiOutputDescription) MarshalZcl() ([]byte, error) {
	return zcl.Zcstring(a).MarshalZcl()
}
func (a *MultiOutputDescription) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zcstring)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiOutputDescription(*nt)
	return br, err
}

func (a MultiOutputDescription) Readable() bool   { return true }
func (a MultiOutputDescription) Writable() bool   { return true }
func (a MultiOutputDescription) Reportable() bool { return false }
func (a MultiOutputDescription) SceneIndex() int  { return -1 }

func (a MultiOutputDescription) String() string {
	return zcl.Sprintf("%s", zcl.Zcstring(a))
}

// MultiOutputNumberOfStates is an autogenerated attribute in the MultistateOutputBasic cluster
type MultiOutputNumberOfStates zcl.Zu16

const MultiOutputNumberOfStatesAttr zcl.AttrID = 74

func (a MultiOutputNumberOfStates) ID() zcl.AttrID                     { return MultiOutputNumberOfStatesAttr }
func (a MultiOutputNumberOfStates) Cluster() zcl.ClusterID             { return MultistateOutputBasicID }
func (a *MultiOutputNumberOfStates) Value() *MultiOutputNumberOfStates { return a }
func (a MultiOutputNumberOfStates) MarshalZcl() ([]byte, error) {
	return zcl.Zu16(a).MarshalZcl()
}
func (a *MultiOutputNumberOfStates) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiOutputNumberOfStates(*nt)
	return br, err
}

func (a MultiOutputNumberOfStates) Readable() bool   { return true }
func (a MultiOutputNumberOfStates) Writable() bool   { return true }
func (a MultiOutputNumberOfStates) Reportable() bool { return false }
func (a MultiOutputNumberOfStates) SceneIndex() int  { return -1 }

func (a MultiOutputNumberOfStates) String() string {
	return zcl.Sprintf("%s", zcl.Zu16(a))
}

// MultiOutputOutOfService is an autogenerated attribute in the MultistateOutputBasic cluster
type MultiOutputOutOfService zcl.Zbool

const MultiOutputOutOfServiceAttr zcl.AttrID = 81

func (a MultiOutputOutOfService) ID() zcl.AttrID                   { return MultiOutputOutOfServiceAttr }
func (a MultiOutputOutOfService) Cluster() zcl.ClusterID           { return MultistateOutputBasicID }
func (a *MultiOutputOutOfService) Value() *MultiOutputOutOfService { return a }
func (a MultiOutputOutOfService) MarshalZcl() ([]byte, error) {
	return zcl.Zbool(a).MarshalZcl()
}
func (a *MultiOutputOutOfService) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbool)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiOutputOutOfService(*nt)
	return br, err
}

func (a MultiOutputOutOfService) Readable() bool   { return true }
func (a MultiOutputOutOfService) Writable() bool   { return true }
func (a MultiOutputOutOfService) Reportable() bool { return false }
func (a MultiOutputOutOfService) SceneIndex() int  { return -1 }

func (a MultiOutputOutOfService) String() string {
	return zcl.Sprintf("%s", zcl.Zbool(a))
}

// MultiOutputPresentValue is an autogenerated attribute in the MultistateOutputBasic cluster
type MultiOutputPresentValue zcl.Zu16

const MultiOutputPresentValueAttr zcl.AttrID = 85

func (a MultiOutputPresentValue) ID() zcl.AttrID                   { return MultiOutputPresentValueAttr }
func (a MultiOutputPresentValue) Cluster() zcl.ClusterID           { return MultistateOutputBasicID }
func (a *MultiOutputPresentValue) Value() *MultiOutputPresentValue { return a }
func (a MultiOutputPresentValue) MarshalZcl() ([]byte, error) {
	return zcl.Zu16(a).MarshalZcl()
}
func (a *MultiOutputPresentValue) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiOutputPresentValue(*nt)
	return br, err
}

func (a MultiOutputPresentValue) Readable() bool   { return true }
func (a MultiOutputPresentValue) Writable() bool   { return true }
func (a MultiOutputPresentValue) Reportable() bool { return true }
func (a MultiOutputPresentValue) SceneIndex() int  { return -1 }

func (a MultiOutputPresentValue) String() string {
	return zcl.Sprintf("%s", zcl.Zu16(a))
}

// MultiOutputPriorityArray is an autogenerated attribute in the MultistateOutputBasic cluster
type MultiOutputPriorityArray zcl.Zarray

const MultiOutputPriorityArrayAttr zcl.AttrID = 87

func (a MultiOutputPriorityArray) ID() zcl.AttrID                    { return MultiOutputPriorityArrayAttr }
func (a MultiOutputPriorityArray) Cluster() zcl.ClusterID            { return MultistateOutputBasicID }
func (a *MultiOutputPriorityArray) Value() *MultiOutputPriorityArray { return a }
func (a MultiOutputPriorityArray) MarshalZcl() ([]byte, error) {
	return zcl.Zarray(a).MarshalZcl()
}
func (a *MultiOutputPriorityArray) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zarray)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiOutputPriorityArray(*nt)
	return br, err
}

func (a MultiOutputPriorityArray) Readable() bool   { return true }
func (a MultiOutputPriorityArray) Writable() bool   { return true }
func (a MultiOutputPriorityArray) Reportable() bool { return false }
func (a MultiOutputPriorityArray) SceneIndex() int  { return -1 }

func (a MultiOutputPriorityArray) String() string {
	return zcl.Sprintf("%s", zcl.Zarray(a))
}

// MultiOutputReliability is an autogenerated attribute in the MultistateOutputBasic cluster
type MultiOutputReliability zcl.Zenum8

const MultiOutputReliabilityAttr zcl.AttrID = 103

func (a MultiOutputReliability) ID() zcl.AttrID                  { return MultiOutputReliabilityAttr }
func (a MultiOutputReliability) Cluster() zcl.ClusterID          { return MultistateOutputBasicID }
func (a *MultiOutputReliability) Value() *MultiOutputReliability { return a }
func (a MultiOutputReliability) MarshalZcl() ([]byte, error) {
	return zcl.Zenum8(a).MarshalZcl()
}
func (a *MultiOutputReliability) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zenum8)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiOutputReliability(*nt)
	return br, err
}

func (a MultiOutputReliability) Readable() bool   { return true }
func (a MultiOutputReliability) Writable() bool   { return true }
func (a MultiOutputReliability) Reportable() bool { return false }
func (a MultiOutputReliability) SceneIndex() int  { return -1 }

func (a MultiOutputReliability) String() string {
	switch a {
	case 0x00:
		return "No fault detected"
	case 0x01:
		return "No Sensor"
	case 0x02:
		return "Over Range"
	case 0x03:
		return "Under Range"
	case 0x04:
		return "Open Loop"
	case 0x05:
		return "Shorted Loop"
	case 0x06:
		return "No Output"
	case 0x07:
		return "Unreliable (other)"
	case 0x08:
		return "Process Error"
	case 0x09:
		return "Multi state fault"
	case 0x0A:
		return "Configuration Error"
	}
	return zcl.Sprintf("%s", zcl.Zenum8(a))
}

// IsNoFaultDetected checks if MultiOutputReliability equals the value for No fault detected (0x00)
func (a MultiOutputReliability) IsNoFaultDetected() bool { return a == 0x00 }

// SetNoFaultDetected sets MultiOutputReliability to No fault detected (0x00)
func (a *MultiOutputReliability) SetNoFaultDetected() { *a = 0x00 }

// IsNoSensor checks if MultiOutputReliability equals the value for No Sensor (0x01)
func (a MultiOutputReliability) IsNoSensor() bool { return a == 0x01 }

// SetNoSensor sets MultiOutputReliability to No Sensor (0x01)
func (a *MultiOutputReliability) SetNoSensor() { *a = 0x01 }

// IsOverRange checks if MultiOutputReliability equals the value for Over Range (0x02)
func (a MultiOutputReliability) IsOverRange() bool { return a == 0x02 }

// SetOverRange sets MultiOutputReliability to Over Range (0x02)
func (a *MultiOutputReliability) SetOverRange() { *a = 0x02 }

// IsUnderRange checks if MultiOutputReliability equals the value for Under Range (0x03)
func (a MultiOutputReliability) IsUnderRange() bool { return a == 0x03 }

// SetUnderRange sets MultiOutputReliability to Under Range (0x03)
func (a *MultiOutputReliability) SetUnderRange() { *a = 0x03 }

// IsOpenLoop checks if MultiOutputReliability equals the value for Open Loop (0x04)
func (a MultiOutputReliability) IsOpenLoop() bool { return a == 0x04 }

// SetOpenLoop sets MultiOutputReliability to Open Loop (0x04)
func (a *MultiOutputReliability) SetOpenLoop() { *a = 0x04 }

// IsShortedLoop checks if MultiOutputReliability equals the value for Shorted Loop (0x05)
func (a MultiOutputReliability) IsShortedLoop() bool { return a == 0x05 }

// SetShortedLoop sets MultiOutputReliability to Shorted Loop (0x05)
func (a *MultiOutputReliability) SetShortedLoop() { *a = 0x05 }

// IsNoOutput checks if MultiOutputReliability equals the value for No Output (0x06)
func (a MultiOutputReliability) IsNoOutput() bool { return a == 0x06 }

// SetNoOutput sets MultiOutputReliability to No Output (0x06)
func (a *MultiOutputReliability) SetNoOutput() { *a = 0x06 }

// IsUnreliableOther checks if MultiOutputReliability equals the value for Unreliable (other) (0x07)
func (a MultiOutputReliability) IsUnreliableOther() bool { return a == 0x07 }

// SetUnreliableOther sets MultiOutputReliability to Unreliable (other) (0x07)
func (a *MultiOutputReliability) SetUnreliableOther() { *a = 0x07 }

// IsProcessError checks if MultiOutputReliability equals the value for Process Error (0x08)
func (a MultiOutputReliability) IsProcessError() bool { return a == 0x08 }

// SetProcessError sets MultiOutputReliability to Process Error (0x08)
func (a *MultiOutputReliability) SetProcessError() { *a = 0x08 }

// IsMultiStateFault checks if MultiOutputReliability equals the value for Multi state fault (0x09)
func (a MultiOutputReliability) IsMultiStateFault() bool { return a == 0x09 }

// SetMultiStateFault sets MultiOutputReliability to Multi state fault (0x09)
func (a *MultiOutputReliability) SetMultiStateFault() { *a = 0x09 }

// IsConfigurationError checks if MultiOutputReliability equals the value for Configuration Error (0x0A)
func (a MultiOutputReliability) IsConfigurationError() bool { return a == 0x0A }

// SetConfigurationError sets MultiOutputReliability to Configuration Error (0x0A)
func (a *MultiOutputReliability) SetConfigurationError() { *a = 0x0A }

// MultiOutputRelinquishDefault is an autogenerated attribute in the MultistateOutputBasic cluster
type MultiOutputRelinquishDefault zcl.Zu16

const MultiOutputRelinquishDefaultAttr zcl.AttrID = 104

func (a MultiOutputRelinquishDefault) ID() zcl.AttrID                        { return MultiOutputRelinquishDefaultAttr }
func (a MultiOutputRelinquishDefault) Cluster() zcl.ClusterID                { return MultistateOutputBasicID }
func (a *MultiOutputRelinquishDefault) Value() *MultiOutputRelinquishDefault { return a }
func (a MultiOutputRelinquishDefault) MarshalZcl() ([]byte, error) {
	return zcl.Zu16(a).MarshalZcl()
}
func (a *MultiOutputRelinquishDefault) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiOutputRelinquishDefault(*nt)
	return br, err
}

func (a MultiOutputRelinquishDefault) Readable() bool   { return true }
func (a MultiOutputRelinquishDefault) Writable() bool   { return true }
func (a MultiOutputRelinquishDefault) Reportable() bool { return false }
func (a MultiOutputRelinquishDefault) SceneIndex() int  { return -1 }

func (a MultiOutputRelinquishDefault) String() string {
	return zcl.Sprintf("%s", zcl.Zu16(a))
}

// MultiOutputStatusFlags is an autogenerated attribute in the MultistateOutputBasic cluster
type MultiOutputStatusFlags zcl.Zbmp8

const MultiOutputStatusFlagsAttr zcl.AttrID = 111

func (a MultiOutputStatusFlags) ID() zcl.AttrID                  { return MultiOutputStatusFlagsAttr }
func (a MultiOutputStatusFlags) Cluster() zcl.ClusterID          { return MultistateOutputBasicID }
func (a *MultiOutputStatusFlags) Value() *MultiOutputStatusFlags { return a }
func (a MultiOutputStatusFlags) MarshalZcl() ([]byte, error) {
	return zcl.Zbmp8(a).MarshalZcl()
}
func (a *MultiOutputStatusFlags) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbmp8)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiOutputStatusFlags(*nt)
	return br, err
}

func (a MultiOutputStatusFlags) Readable() bool   { return true }
func (a MultiOutputStatusFlags) Writable() bool   { return false }
func (a MultiOutputStatusFlags) Reportable() bool { return true }
func (a MultiOutputStatusFlags) SceneIndex() int  { return -1 }

func (a MultiOutputStatusFlags) String() string {
	var bstr []string
	if a.IsInAlarm() {
		bstr = append(bstr, "In Alarm")
	}
	if a.IsFault() {
		bstr = append(bstr, "Fault")
	}
	if a.IsOveridden() {
		bstr = append(bstr, "Overidden")
	}
	if a.IsOutOfService() {
		bstr = append(bstr, "Out of Service")
	}
	return zcl.StrJoin(bstr, ", ")
}

func (a MultiOutputStatusFlags) IsInAlarm() bool {
	return zcl.BitmapTest([]byte(a), 0)
}
func (a *MultiOutputStatusFlags) SetInAlarm(b bool) {
	*a = MultiOutputStatusFlags(zcl.BitmapSet([]byte(*a), 0, b))
}

func (a MultiOutputStatusFlags) IsFault() bool {
	return zcl.BitmapTest([]byte(a), 1)
}
func (a *MultiOutputStatusFlags) SetFault(b bool) {
	*a = MultiOutputStatusFlags(zcl.BitmapSet([]byte(*a), 1, b))
}

func (a MultiOutputStatusFlags) IsOveridden() bool {
	return zcl.BitmapTest([]byte(a), 2)
}
func (a *MultiOutputStatusFlags) SetOveridden(b bool) {
	*a = MultiOutputStatusFlags(zcl.BitmapSet([]byte(*a), 2, b))
}

func (a MultiOutputStatusFlags) IsOutOfService() bool {
	return zcl.BitmapTest([]byte(a), 3)
}
func (a *MultiOutputStatusFlags) SetOutOfService(b bool) {
	*a = MultiOutputStatusFlags(zcl.BitmapSet([]byte(*a), 3, b))
}

// MultiOutputApplicationType is an autogenerated attribute in the MultistateOutputBasic cluster
type MultiOutputApplicationType zcl.Zu32

const MultiOutputApplicationTypeAttr zcl.AttrID = 256

func (a MultiOutputApplicationType) ID() zcl.AttrID                      { return MultiOutputApplicationTypeAttr }
func (a MultiOutputApplicationType) Cluster() zcl.ClusterID              { return MultistateOutputBasicID }
func (a *MultiOutputApplicationType) Value() *MultiOutputApplicationType { return a }
func (a MultiOutputApplicationType) MarshalZcl() ([]byte, error) {
	return zcl.Zu32(a).MarshalZcl()
}
func (a *MultiOutputApplicationType) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu32)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiOutputApplicationType(*nt)
	return br, err
}

func (a MultiOutputApplicationType) Readable() bool   { return true }
func (a MultiOutputApplicationType) Writable() bool   { return false }
func (a MultiOutputApplicationType) Reportable() bool { return false }
func (a MultiOutputApplicationType) SceneIndex() int  { return -1 }

func (a MultiOutputApplicationType) String() string {
	return zcl.Sprintf("%s", zcl.Zu32(a))
}

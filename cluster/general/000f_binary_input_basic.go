// The Binary Input (Basic) cluster provides an interface for reading the value of a binary measurement and accessing various characteristics of that measurement. The cluster is typically used to implement a sensor that measures a two-state physical quantity.
package general

import (
	"neotor.se/zcl"
)

// BinaryInputBasic
const BinaryInputBasicID zcl.ClusterID = 15

var BinaryInputBasicCluster = zcl.Cluster{
	ServerCmd: map[zcl.CommandID]func() zcl.Command{},
	ClientCmd: map[zcl.CommandID]func() zcl.Command{},
	ServerAttr: map[zcl.AttrID]func() zcl.Attr{
		BinaryInputActiveTextAttr:      func() zcl.Attr { return new(BinaryInputActiveText) },
		BinaryInputDescriptionAttr:     func() zcl.Attr { return new(BinaryInputDescription) },
		BinaryInputInactiveTextAttr:    func() zcl.Attr { return new(BinaryInputInactiveText) },
		BinaryInputOutOfServiceAttr:    func() zcl.Attr { return new(BinaryInputOutOfService) },
		BinaryInputPolarityAttr:        func() zcl.Attr { return new(BinaryInputPolarity) },
		BinaryInputPresentValueAttr:    func() zcl.Attr { return new(BinaryInputPresentValue) },
		BinaryInputReliabilityAttr:     func() zcl.Attr { return new(BinaryInputReliability) },
		BinaryInputStatusFlagsAttr:     func() zcl.Attr { return new(BinaryInputStatusFlags) },
		BinaryInputApplicationTypeAttr: func() zcl.Attr { return new(BinaryInputApplicationType) },
	},
	ClientAttr: map[zcl.AttrID]func() zcl.Attr{},
	SceneAttr:  []zcl.AttrID{},
}

// BinaryInputActiveText is an autogenerated attribute in the BinaryInputBasic cluster
type BinaryInputActiveText zcl.Zcstring

const BinaryInputActiveTextAttr zcl.AttrID = 4

func (BinaryInputActiveText) ID() zcl.AttrID                   { return BinaryInputActiveTextAttr }
func (BinaryInputActiveText) Cluster() zcl.ClusterID           { return BinaryInputBasicID }
func (BinaryInputActiveText) Name() string                     { return "Binary Input Active Text" }
func (BinaryInputActiveText) Readable() bool                   { return true }
func (BinaryInputActiveText) Writable() bool                   { return true }
func (BinaryInputActiveText) Reportable() bool                 { return false }
func (BinaryInputActiveText) SceneIndex() int                  { return -1 }
func (a *BinaryInputActiveText) Value() *BinaryInputActiveText { return a }
func (a BinaryInputActiveText) MarshalZcl() ([]byte, error)    { return zcl.Zcstring(a).MarshalZcl() }

func (a *BinaryInputActiveText) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zcstring)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryInputActiveText(*nt)
	return br, err
}

func (a BinaryInputActiveText) String() string {
	return zcl.Sprintf("%v", zcl.Zcstring(a))
}

// BinaryInputDescription is an autogenerated attribute in the BinaryInputBasic cluster
type BinaryInputDescription zcl.Zcstring

const BinaryInputDescriptionAttr zcl.AttrID = 28

func (BinaryInputDescription) ID() zcl.AttrID                    { return BinaryInputDescriptionAttr }
func (BinaryInputDescription) Cluster() zcl.ClusterID            { return BinaryInputBasicID }
func (BinaryInputDescription) Name() string                      { return "Binary Input Description" }
func (BinaryInputDescription) Readable() bool                    { return true }
func (BinaryInputDescription) Writable() bool                    { return true }
func (BinaryInputDescription) Reportable() bool                  { return false }
func (BinaryInputDescription) SceneIndex() int                   { return -1 }
func (a *BinaryInputDescription) Value() *BinaryInputDescription { return a }
func (a BinaryInputDescription) MarshalZcl() ([]byte, error)     { return zcl.Zcstring(a).MarshalZcl() }

func (a *BinaryInputDescription) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zcstring)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryInputDescription(*nt)
	return br, err
}

func (a BinaryInputDescription) String() string {
	return zcl.Sprintf("%v", zcl.Zcstring(a))
}

// BinaryInputInactiveText is an autogenerated attribute in the BinaryInputBasic cluster
type BinaryInputInactiveText zcl.Zcstring

const BinaryInputInactiveTextAttr zcl.AttrID = 46

func (BinaryInputInactiveText) ID() zcl.AttrID                     { return BinaryInputInactiveTextAttr }
func (BinaryInputInactiveText) Cluster() zcl.ClusterID             { return BinaryInputBasicID }
func (BinaryInputInactiveText) Name() string                       { return "Binary Input Inactive Text" }
func (BinaryInputInactiveText) Readable() bool                     { return true }
func (BinaryInputInactiveText) Writable() bool                     { return true }
func (BinaryInputInactiveText) Reportable() bool                   { return false }
func (BinaryInputInactiveText) SceneIndex() int                    { return -1 }
func (a *BinaryInputInactiveText) Value() *BinaryInputInactiveText { return a }
func (a BinaryInputInactiveText) MarshalZcl() ([]byte, error)      { return zcl.Zcstring(a).MarshalZcl() }

func (a *BinaryInputInactiveText) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zcstring)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryInputInactiveText(*nt)
	return br, err
}

func (a BinaryInputInactiveText) String() string {
	return zcl.Sprintf("%v", zcl.Zcstring(a))
}

// BinaryInputOutOfService is an autogenerated attribute in the BinaryInputBasic cluster
type BinaryInputOutOfService zcl.Zbool

const BinaryInputOutOfServiceAttr zcl.AttrID = 81

func (BinaryInputOutOfService) ID() zcl.AttrID                     { return BinaryInputOutOfServiceAttr }
func (BinaryInputOutOfService) Cluster() zcl.ClusterID             { return BinaryInputBasicID }
func (BinaryInputOutOfService) Name() string                       { return "Binary Input Out of Service" }
func (BinaryInputOutOfService) Readable() bool                     { return true }
func (BinaryInputOutOfService) Writable() bool                     { return true }
func (BinaryInputOutOfService) Reportable() bool                   { return false }
func (BinaryInputOutOfService) SceneIndex() int                    { return -1 }
func (a *BinaryInputOutOfService) Value() *BinaryInputOutOfService { return a }
func (a BinaryInputOutOfService) MarshalZcl() ([]byte, error)      { return zcl.Zbool(a).MarshalZcl() }

func (a *BinaryInputOutOfService) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbool)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryInputOutOfService(*nt)
	return br, err
}

func (a BinaryInputOutOfService) String() string {
	return zcl.Sprintf("%v", zcl.Zbool(a))
}

// BinaryInputPolarity is an autogenerated attribute in the BinaryInputBasic cluster
type BinaryInputPolarity zcl.Zenum8

const BinaryInputPolarityAttr zcl.AttrID = 84

func (BinaryInputPolarity) ID() zcl.AttrID                 { return BinaryInputPolarityAttr }
func (BinaryInputPolarity) Cluster() zcl.ClusterID         { return BinaryInputBasicID }
func (BinaryInputPolarity) Name() string                   { return "Binary Input Polarity" }
func (BinaryInputPolarity) Readable() bool                 { return true }
func (BinaryInputPolarity) Writable() bool                 { return false }
func (BinaryInputPolarity) Reportable() bool               { return false }
func (BinaryInputPolarity) SceneIndex() int                { return -1 }
func (a *BinaryInputPolarity) Value() *BinaryInputPolarity { return a }
func (a BinaryInputPolarity) MarshalZcl() ([]byte, error)  { return zcl.Zenum8(a).MarshalZcl() }

func (a *BinaryInputPolarity) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zenum8)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryInputPolarity(*nt)
	return br, err
}

func (a BinaryInputPolarity) String() string {
	switch a {
	case 0x00:
		return "Normal"
	case 0x01:
		return "Reverse"
	}
	return zcl.Sprintf("%v", zcl.Zenum8(a))
}

// IsNormal checks if BinaryInputPolarity equals the value for Normal (0x00)
func (a BinaryInputPolarity) IsNormal() bool { return a == 0x00 }

// SetNormal sets BinaryInputPolarity to Normal (0x00)
func (a *BinaryInputPolarity) SetNormal() { *a = 0x00 }

// IsReverse checks if BinaryInputPolarity equals the value for Reverse (0x01)
func (a BinaryInputPolarity) IsReverse() bool { return a == 0x01 }

// SetReverse sets BinaryInputPolarity to Reverse (0x01)
func (a *BinaryInputPolarity) SetReverse() { *a = 0x01 }

// BinaryInputPresentValue is an autogenerated attribute in the BinaryInputBasic cluster
type BinaryInputPresentValue zcl.Zbool

const BinaryInputPresentValueAttr zcl.AttrID = 85

func (BinaryInputPresentValue) ID() zcl.AttrID                     { return BinaryInputPresentValueAttr }
func (BinaryInputPresentValue) Cluster() zcl.ClusterID             { return BinaryInputBasicID }
func (BinaryInputPresentValue) Name() string                       { return "Binary Input Present Value" }
func (BinaryInputPresentValue) Readable() bool                     { return true }
func (BinaryInputPresentValue) Writable() bool                     { return true }
func (BinaryInputPresentValue) Reportable() bool                   { return true }
func (BinaryInputPresentValue) SceneIndex() int                    { return -1 }
func (a *BinaryInputPresentValue) Value() *BinaryInputPresentValue { return a }
func (a BinaryInputPresentValue) MarshalZcl() ([]byte, error)      { return zcl.Zbool(a).MarshalZcl() }

func (a *BinaryInputPresentValue) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbool)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryInputPresentValue(*nt)
	return br, err
}

func (a BinaryInputPresentValue) String() string {
	return zcl.Sprintf("%v", zcl.Zbool(a))
}

// BinaryInputReliability is an autogenerated attribute in the BinaryInputBasic cluster
type BinaryInputReliability zcl.Zenum8

const BinaryInputReliabilityAttr zcl.AttrID = 103

func (BinaryInputReliability) ID() zcl.AttrID                    { return BinaryInputReliabilityAttr }
func (BinaryInputReliability) Cluster() zcl.ClusterID            { return BinaryInputBasicID }
func (BinaryInputReliability) Name() string                      { return "Binary Input Reliability" }
func (BinaryInputReliability) Readable() bool                    { return true }
func (BinaryInputReliability) Writable() bool                    { return true }
func (BinaryInputReliability) Reportable() bool                  { return false }
func (BinaryInputReliability) SceneIndex() int                   { return -1 }
func (a *BinaryInputReliability) Value() *BinaryInputReliability { return a }
func (a BinaryInputReliability) MarshalZcl() ([]byte, error)     { return zcl.Zenum8(a).MarshalZcl() }

func (a *BinaryInputReliability) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zenum8)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryInputReliability(*nt)
	return br, err
}

func (a BinaryInputReliability) String() string {
	switch a {
	case 0x00:
		return "No fault detected"
	case 0x01:
		return "No Sensor"
	case 0x02:
		return "Over Range"
	case 0x03:
		return "Under Range"
	case 0x04:
		return "Open Loop"
	case 0x05:
		return "Shorted Loop"
	case 0x06:
		return "No Output"
	case 0x07:
		return "Unreliable (other)"
	case 0x08:
		return "Process Error"
	case 0x09:
		return "Multi state fault"
	case 0x0A:
		return "Configuration Error"
	}
	return zcl.Sprintf("%v", zcl.Zenum8(a))
}

// IsNoFaultDetected checks if BinaryInputReliability equals the value for No fault detected (0x00)
func (a BinaryInputReliability) IsNoFaultDetected() bool { return a == 0x00 }

// SetNoFaultDetected sets BinaryInputReliability to No fault detected (0x00)
func (a *BinaryInputReliability) SetNoFaultDetected() { *a = 0x00 }

// IsNoSensor checks if BinaryInputReliability equals the value for No Sensor (0x01)
func (a BinaryInputReliability) IsNoSensor() bool { return a == 0x01 }

// SetNoSensor sets BinaryInputReliability to No Sensor (0x01)
func (a *BinaryInputReliability) SetNoSensor() { *a = 0x01 }

// IsOverRange checks if BinaryInputReliability equals the value for Over Range (0x02)
func (a BinaryInputReliability) IsOverRange() bool { return a == 0x02 }

// SetOverRange sets BinaryInputReliability to Over Range (0x02)
func (a *BinaryInputReliability) SetOverRange() { *a = 0x02 }

// IsUnderRange checks if BinaryInputReliability equals the value for Under Range (0x03)
func (a BinaryInputReliability) IsUnderRange() bool { return a == 0x03 }

// SetUnderRange sets BinaryInputReliability to Under Range (0x03)
func (a *BinaryInputReliability) SetUnderRange() { *a = 0x03 }

// IsOpenLoop checks if BinaryInputReliability equals the value for Open Loop (0x04)
func (a BinaryInputReliability) IsOpenLoop() bool { return a == 0x04 }

// SetOpenLoop sets BinaryInputReliability to Open Loop (0x04)
func (a *BinaryInputReliability) SetOpenLoop() { *a = 0x04 }

// IsShortedLoop checks if BinaryInputReliability equals the value for Shorted Loop (0x05)
func (a BinaryInputReliability) IsShortedLoop() bool { return a == 0x05 }

// SetShortedLoop sets BinaryInputReliability to Shorted Loop (0x05)
func (a *BinaryInputReliability) SetShortedLoop() { *a = 0x05 }

// IsNoOutput checks if BinaryInputReliability equals the value for No Output (0x06)
func (a BinaryInputReliability) IsNoOutput() bool { return a == 0x06 }

// SetNoOutput sets BinaryInputReliability to No Output (0x06)
func (a *BinaryInputReliability) SetNoOutput() { *a = 0x06 }

// IsUnreliableOther checks if BinaryInputReliability equals the value for Unreliable (other) (0x07)
func (a BinaryInputReliability) IsUnreliableOther() bool { return a == 0x07 }

// SetUnreliableOther sets BinaryInputReliability to Unreliable (other) (0x07)
func (a *BinaryInputReliability) SetUnreliableOther() { *a = 0x07 }

// IsProcessError checks if BinaryInputReliability equals the value for Process Error (0x08)
func (a BinaryInputReliability) IsProcessError() bool { return a == 0x08 }

// SetProcessError sets BinaryInputReliability to Process Error (0x08)
func (a *BinaryInputReliability) SetProcessError() { *a = 0x08 }

// IsMultiStateFault checks if BinaryInputReliability equals the value for Multi state fault (0x09)
func (a BinaryInputReliability) IsMultiStateFault() bool { return a == 0x09 }

// SetMultiStateFault sets BinaryInputReliability to Multi state fault (0x09)
func (a *BinaryInputReliability) SetMultiStateFault() { *a = 0x09 }

// IsConfigurationError checks if BinaryInputReliability equals the value for Configuration Error (0x0A)
func (a BinaryInputReliability) IsConfigurationError() bool { return a == 0x0A }

// SetConfigurationError sets BinaryInputReliability to Configuration Error (0x0A)
func (a *BinaryInputReliability) SetConfigurationError() { *a = 0x0A }

// BinaryInputStatusFlags is an autogenerated attribute in the BinaryInputBasic cluster
type BinaryInputStatusFlags zcl.Zbmp8

const BinaryInputStatusFlagsAttr zcl.AttrID = 111

func (BinaryInputStatusFlags) ID() zcl.AttrID                    { return BinaryInputStatusFlagsAttr }
func (BinaryInputStatusFlags) Cluster() zcl.ClusterID            { return BinaryInputBasicID }
func (BinaryInputStatusFlags) Name() string                      { return "Binary Input Status Flags" }
func (BinaryInputStatusFlags) Readable() bool                    { return true }
func (BinaryInputStatusFlags) Writable() bool                    { return false }
func (BinaryInputStatusFlags) Reportable() bool                  { return true }
func (BinaryInputStatusFlags) SceneIndex() int                   { return -1 }
func (a *BinaryInputStatusFlags) Value() *BinaryInputStatusFlags { return a }
func (a BinaryInputStatusFlags) MarshalZcl() ([]byte, error)     { return zcl.Zbmp8(a).MarshalZcl() }

func (a *BinaryInputStatusFlags) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbmp8)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryInputStatusFlags(*nt)
	return br, err
}

func (a BinaryInputStatusFlags) String() string {
	var bstr []string
	if a.IsInAlarm() {
		bstr = append(bstr, "In Alarm")
	}
	if a.IsFault() {
		bstr = append(bstr, "Fault")
	}
	if a.IsOveridden() {
		bstr = append(bstr, "Overidden")
	}
	if a.IsOutOfService() {
		bstr = append(bstr, "Out of Service")
	}
	return zcl.StrJoin(bstr, ", ")
}

func (a BinaryInputStatusFlags) IsInAlarm() bool {
	return zcl.BitmapTest([]byte(a), 0)
}
func (a *BinaryInputStatusFlags) SetInAlarm(b bool) {
	*a = BinaryInputStatusFlags(zcl.BitmapSet([]byte(*a), 0, b))
}

func (a BinaryInputStatusFlags) IsFault() bool {
	return zcl.BitmapTest([]byte(a), 1)
}
func (a *BinaryInputStatusFlags) SetFault(b bool) {
	*a = BinaryInputStatusFlags(zcl.BitmapSet([]byte(*a), 1, b))
}

func (a BinaryInputStatusFlags) IsOveridden() bool {
	return zcl.BitmapTest([]byte(a), 2)
}
func (a *BinaryInputStatusFlags) SetOveridden(b bool) {
	*a = BinaryInputStatusFlags(zcl.BitmapSet([]byte(*a), 2, b))
}

func (a BinaryInputStatusFlags) IsOutOfService() bool {
	return zcl.BitmapTest([]byte(a), 3)
}
func (a *BinaryInputStatusFlags) SetOutOfService(b bool) {
	*a = BinaryInputStatusFlags(zcl.BitmapSet([]byte(*a), 3, b))
}

// BinaryInputApplicationType is an autogenerated attribute in the BinaryInputBasic cluster
type BinaryInputApplicationType zcl.Zu32

const BinaryInputApplicationTypeAttr zcl.AttrID = 256

func (BinaryInputApplicationType) ID() zcl.AttrID                        { return BinaryInputApplicationTypeAttr }
func (BinaryInputApplicationType) Cluster() zcl.ClusterID                { return BinaryInputBasicID }
func (BinaryInputApplicationType) Name() string                          { return "Binary Input Application Type" }
func (BinaryInputApplicationType) Readable() bool                        { return true }
func (BinaryInputApplicationType) Writable() bool                        { return false }
func (BinaryInputApplicationType) Reportable() bool                      { return false }
func (BinaryInputApplicationType) SceneIndex() int                       { return -1 }
func (a *BinaryInputApplicationType) Value() *BinaryInputApplicationType { return a }
func (a BinaryInputApplicationType) MarshalZcl() ([]byte, error)         { return zcl.Zu32(a).MarshalZcl() }

func (a *BinaryInputApplicationType) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu32)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryInputApplicationType(*nt)
	return br, err
}

func (a BinaryInputApplicationType) String() string {
	return zcl.Sprintf("%v", zcl.Zu32(a))
}

package general

import (
	"neotor.se/zcl"
)

// BinaryOutputBasic
const BinaryOutputBasicID zcl.ClusterID = 16

var BinaryOutputBasicCluster = zcl.Cluster{
	ServerCmd: map[zcl.CommandID]func() zcl.Command{},
	ClientCmd: map[zcl.CommandID]func() zcl.Command{},
	ServerAttr: map[zcl.AttrID]func() zcl.Attr{
		BinaryOutputActiveTextAttr:        func() zcl.Attr { return new(BinaryOutputActiveText) },
		BinaryOutputDescriptionAttr:       func() zcl.Attr { return new(BinaryOutputDescription) },
		BinaryOutputInactiveTextAttr:      func() zcl.Attr { return new(BinaryOutputInactiveText) },
		BinaryOutputMinimumOffTimeAttr:    func() zcl.Attr { return new(BinaryOutputMinimumOffTime) },
		BinaryOutputMaximumOffTimeAttr:    func() zcl.Attr { return new(BinaryOutputMaximumOffTime) },
		BinaryOutputOutOfServiceAttr:      func() zcl.Attr { return new(BinaryOutputOutOfService) },
		BinaryOutputPolarityAttr:          func() zcl.Attr { return new(BinaryOutputPolarity) },
		BinaryOutputPresentValueAttr:      func() zcl.Attr { return new(BinaryOutputPresentValue) },
		BinaryOutputPriorityArrayAttr:     func() zcl.Attr { return new(BinaryOutputPriorityArray) },
		BinaryOutputReliabilityAttr:       func() zcl.Attr { return new(BinaryOutputReliability) },
		BinaryOutputRelinquishDefaultAttr: func() zcl.Attr { return new(BinaryOutputRelinquishDefault) },
		BinaryOutputStatusFlagsAttr:       func() zcl.Attr { return new(BinaryOutputStatusFlags) },
		BinaryOutputApplicationTypeAttr:   func() zcl.Attr { return new(BinaryOutputApplicationType) },
	},
	ClientAttr: map[zcl.AttrID]func() zcl.Attr{},
	SceneAttr:  []zcl.AttrID{},
}

// BinaryOutputActiveText is an autogenerated attribute in the BinaryOutputBasic cluster
type BinaryOutputActiveText zcl.Zcstring

const BinaryOutputActiveTextAttr zcl.AttrID = 4

func (a BinaryOutputActiveText) ID() zcl.AttrID                  { return BinaryOutputActiveTextAttr }
func (a BinaryOutputActiveText) Cluster() zcl.ClusterID          { return BinaryOutputBasicID }
func (a *BinaryOutputActiveText) Value() *BinaryOutputActiveText { return a }
func (a BinaryOutputActiveText) MarshalZcl() ([]byte, error) {
	return zcl.Zcstring(a).MarshalZcl()
}
func (a *BinaryOutputActiveText) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zcstring)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryOutputActiveText(*nt)
	return br, err
}
func (BinaryOutputActiveText) Name() string     { return "Binary Output Active Text" }
func (BinaryOutputActiveText) Readable() bool   { return true }
func (BinaryOutputActiveText) Writable() bool   { return true }
func (BinaryOutputActiveText) Reportable() bool { return false }
func (BinaryOutputActiveText) SceneIndex() int  { return -1 }

func (a BinaryOutputActiveText) String() string {
	return zcl.Sprintf("%v", zcl.Zcstring(a))
}

// BinaryOutputDescription is an autogenerated attribute in the BinaryOutputBasic cluster
type BinaryOutputDescription zcl.Zcstring

const BinaryOutputDescriptionAttr zcl.AttrID = 28

func (a BinaryOutputDescription) ID() zcl.AttrID                   { return BinaryOutputDescriptionAttr }
func (a BinaryOutputDescription) Cluster() zcl.ClusterID           { return BinaryOutputBasicID }
func (a *BinaryOutputDescription) Value() *BinaryOutputDescription { return a }
func (a BinaryOutputDescription) MarshalZcl() ([]byte, error) {
	return zcl.Zcstring(a).MarshalZcl()
}
func (a *BinaryOutputDescription) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zcstring)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryOutputDescription(*nt)
	return br, err
}
func (BinaryOutputDescription) Name() string     { return "Binary Output Description" }
func (BinaryOutputDescription) Readable() bool   { return true }
func (BinaryOutputDescription) Writable() bool   { return true }
func (BinaryOutputDescription) Reportable() bool { return false }
func (BinaryOutputDescription) SceneIndex() int  { return -1 }

func (a BinaryOutputDescription) String() string {
	return zcl.Sprintf("%v", zcl.Zcstring(a))
}

// BinaryOutputInactiveText is an autogenerated attribute in the BinaryOutputBasic cluster
type BinaryOutputInactiveText zcl.Zcstring

const BinaryOutputInactiveTextAttr zcl.AttrID = 46

func (a BinaryOutputInactiveText) ID() zcl.AttrID                    { return BinaryOutputInactiveTextAttr }
func (a BinaryOutputInactiveText) Cluster() zcl.ClusterID            { return BinaryOutputBasicID }
func (a *BinaryOutputInactiveText) Value() *BinaryOutputInactiveText { return a }
func (a BinaryOutputInactiveText) MarshalZcl() ([]byte, error) {
	return zcl.Zcstring(a).MarshalZcl()
}
func (a *BinaryOutputInactiveText) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zcstring)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryOutputInactiveText(*nt)
	return br, err
}
func (BinaryOutputInactiveText) Name() string     { return "Binary Output Inactive Text" }
func (BinaryOutputInactiveText) Readable() bool   { return true }
func (BinaryOutputInactiveText) Writable() bool   { return true }
func (BinaryOutputInactiveText) Reportable() bool { return false }
func (BinaryOutputInactiveText) SceneIndex() int  { return -1 }

func (a BinaryOutputInactiveText) String() string {
	return zcl.Sprintf("%v", zcl.Zcstring(a))
}

// BinaryOutputMinimumOffTime is an autogenerated attribute in the BinaryOutputBasic cluster
type BinaryOutputMinimumOffTime zcl.Zu32

const BinaryOutputMinimumOffTimeAttr zcl.AttrID = 66

func (a BinaryOutputMinimumOffTime) ID() zcl.AttrID                      { return BinaryOutputMinimumOffTimeAttr }
func (a BinaryOutputMinimumOffTime) Cluster() zcl.ClusterID              { return BinaryOutputBasicID }
func (a *BinaryOutputMinimumOffTime) Value() *BinaryOutputMinimumOffTime { return a }
func (a BinaryOutputMinimumOffTime) MarshalZcl() ([]byte, error) {
	return zcl.Zu32(a).MarshalZcl()
}
func (a *BinaryOutputMinimumOffTime) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu32)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryOutputMinimumOffTime(*nt)
	return br, err
}
func (BinaryOutputMinimumOffTime) Name() string     { return "Binary Output Minimum Off Time" }
func (BinaryOutputMinimumOffTime) Readable() bool   { return true }
func (BinaryOutputMinimumOffTime) Writable() bool   { return true }
func (BinaryOutputMinimumOffTime) Reportable() bool { return false }
func (BinaryOutputMinimumOffTime) SceneIndex() int  { return -1 }

func (a BinaryOutputMinimumOffTime) String() string {
	return zcl.Sprintf("%v", zcl.Zu32(a))
}

// BinaryOutputMaximumOffTime is an autogenerated attribute in the BinaryOutputBasic cluster
type BinaryOutputMaximumOffTime zcl.Zu32

const BinaryOutputMaximumOffTimeAttr zcl.AttrID = 67

func (a BinaryOutputMaximumOffTime) ID() zcl.AttrID                      { return BinaryOutputMaximumOffTimeAttr }
func (a BinaryOutputMaximumOffTime) Cluster() zcl.ClusterID              { return BinaryOutputBasicID }
func (a *BinaryOutputMaximumOffTime) Value() *BinaryOutputMaximumOffTime { return a }
func (a BinaryOutputMaximumOffTime) MarshalZcl() ([]byte, error) {
	return zcl.Zu32(a).MarshalZcl()
}
func (a *BinaryOutputMaximumOffTime) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu32)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryOutputMaximumOffTime(*nt)
	return br, err
}
func (BinaryOutputMaximumOffTime) Name() string     { return "Binary Output Maximum Off Time" }
func (BinaryOutputMaximumOffTime) Readable() bool   { return true }
func (BinaryOutputMaximumOffTime) Writable() bool   { return true }
func (BinaryOutputMaximumOffTime) Reportable() bool { return false }
func (BinaryOutputMaximumOffTime) SceneIndex() int  { return -1 }

func (a BinaryOutputMaximumOffTime) String() string {
	return zcl.Sprintf("%v", zcl.Zu32(a))
}

// BinaryOutputOutOfService is an autogenerated attribute in the BinaryOutputBasic cluster
type BinaryOutputOutOfService zcl.Zbool

const BinaryOutputOutOfServiceAttr zcl.AttrID = 81

func (a BinaryOutputOutOfService) ID() zcl.AttrID                    { return BinaryOutputOutOfServiceAttr }
func (a BinaryOutputOutOfService) Cluster() zcl.ClusterID            { return BinaryOutputBasicID }
func (a *BinaryOutputOutOfService) Value() *BinaryOutputOutOfService { return a }
func (a BinaryOutputOutOfService) MarshalZcl() ([]byte, error) {
	return zcl.Zbool(a).MarshalZcl()
}
func (a *BinaryOutputOutOfService) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbool)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryOutputOutOfService(*nt)
	return br, err
}
func (BinaryOutputOutOfService) Name() string     { return "Binary Output Out of Service" }
func (BinaryOutputOutOfService) Readable() bool   { return true }
func (BinaryOutputOutOfService) Writable() bool   { return true }
func (BinaryOutputOutOfService) Reportable() bool { return false }
func (BinaryOutputOutOfService) SceneIndex() int  { return -1 }

func (a BinaryOutputOutOfService) String() string {
	return zcl.Sprintf("%v", zcl.Zbool(a))
}

// BinaryOutputPolarity is an autogenerated attribute in the BinaryOutputBasic cluster
type BinaryOutputPolarity zcl.Zenum8

const BinaryOutputPolarityAttr zcl.AttrID = 84

func (a BinaryOutputPolarity) ID() zcl.AttrID                { return BinaryOutputPolarityAttr }
func (a BinaryOutputPolarity) Cluster() zcl.ClusterID        { return BinaryOutputBasicID }
func (a *BinaryOutputPolarity) Value() *BinaryOutputPolarity { return a }
func (a BinaryOutputPolarity) MarshalZcl() ([]byte, error) {
	return zcl.Zenum8(a).MarshalZcl()
}
func (a *BinaryOutputPolarity) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zenum8)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryOutputPolarity(*nt)
	return br, err
}
func (BinaryOutputPolarity) Name() string     { return "Binary Output Polarity" }
func (BinaryOutputPolarity) Readable() bool   { return true }
func (BinaryOutputPolarity) Writable() bool   { return false }
func (BinaryOutputPolarity) Reportable() bool { return false }
func (BinaryOutputPolarity) SceneIndex() int  { return -1 }

func (a BinaryOutputPolarity) String() string {
	switch a {
	case 0x00:
		return "Normal"
	case 0x01:
		return "Reverse"
	}
	return zcl.Sprintf("%v", zcl.Zenum8(a))
}

// IsNormal checks if BinaryOutputPolarity equals the value for Normal (0x00)
func (a BinaryOutputPolarity) IsNormal() bool { return a == 0x00 }

// SetNormal sets BinaryOutputPolarity to Normal (0x00)
func (a *BinaryOutputPolarity) SetNormal() { *a = 0x00 }

// IsReverse checks if BinaryOutputPolarity equals the value for Reverse (0x01)
func (a BinaryOutputPolarity) IsReverse() bool { return a == 0x01 }

// SetReverse sets BinaryOutputPolarity to Reverse (0x01)
func (a *BinaryOutputPolarity) SetReverse() { *a = 0x01 }

// BinaryOutputPresentValue is an autogenerated attribute in the BinaryOutputBasic cluster
type BinaryOutputPresentValue zcl.Zbool

const BinaryOutputPresentValueAttr zcl.AttrID = 85

func (a BinaryOutputPresentValue) ID() zcl.AttrID                    { return BinaryOutputPresentValueAttr }
func (a BinaryOutputPresentValue) Cluster() zcl.ClusterID            { return BinaryOutputBasicID }
func (a *BinaryOutputPresentValue) Value() *BinaryOutputPresentValue { return a }
func (a BinaryOutputPresentValue) MarshalZcl() ([]byte, error) {
	return zcl.Zbool(a).MarshalZcl()
}
func (a *BinaryOutputPresentValue) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbool)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryOutputPresentValue(*nt)
	return br, err
}
func (BinaryOutputPresentValue) Name() string     { return "Binary Output Present Value" }
func (BinaryOutputPresentValue) Readable() bool   { return true }
func (BinaryOutputPresentValue) Writable() bool   { return true }
func (BinaryOutputPresentValue) Reportable() bool { return true }
func (BinaryOutputPresentValue) SceneIndex() int  { return -1 }

func (a BinaryOutputPresentValue) String() string {
	return zcl.Sprintf("%v", zcl.Zbool(a))
}

// BinaryOutputPriorityArray is an autogenerated attribute in the BinaryOutputBasic cluster
type BinaryOutputPriorityArray zcl.Zarray

const BinaryOutputPriorityArrayAttr zcl.AttrID = 87

func (a BinaryOutputPriorityArray) ID() zcl.AttrID                     { return BinaryOutputPriorityArrayAttr }
func (a BinaryOutputPriorityArray) Cluster() zcl.ClusterID             { return BinaryOutputBasicID }
func (a *BinaryOutputPriorityArray) Value() *BinaryOutputPriorityArray { return a }
func (a BinaryOutputPriorityArray) MarshalZcl() ([]byte, error) {
	return zcl.Zarray(a).MarshalZcl()
}
func (a *BinaryOutputPriorityArray) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zarray)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryOutputPriorityArray(*nt)
	return br, err
}
func (BinaryOutputPriorityArray) Name() string     { return "Binary Output Priority Array" }
func (BinaryOutputPriorityArray) Readable() bool   { return true }
func (BinaryOutputPriorityArray) Writable() bool   { return true }
func (BinaryOutputPriorityArray) Reportable() bool { return false }
func (BinaryOutputPriorityArray) SceneIndex() int  { return -1 }

func (a BinaryOutputPriorityArray) String() string {
	return zcl.Sprintf("%v", zcl.Zarray(a))
}

// BinaryOutputReliability is an autogenerated attribute in the BinaryOutputBasic cluster
type BinaryOutputReliability zcl.Zenum8

const BinaryOutputReliabilityAttr zcl.AttrID = 103

func (a BinaryOutputReliability) ID() zcl.AttrID                   { return BinaryOutputReliabilityAttr }
func (a BinaryOutputReliability) Cluster() zcl.ClusterID           { return BinaryOutputBasicID }
func (a *BinaryOutputReliability) Value() *BinaryOutputReliability { return a }
func (a BinaryOutputReliability) MarshalZcl() ([]byte, error) {
	return zcl.Zenum8(a).MarshalZcl()
}
func (a *BinaryOutputReliability) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zenum8)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryOutputReliability(*nt)
	return br, err
}
func (BinaryOutputReliability) Name() string     { return "Binary Output Reliability" }
func (BinaryOutputReliability) Readable() bool   { return true }
func (BinaryOutputReliability) Writable() bool   { return true }
func (BinaryOutputReliability) Reportable() bool { return false }
func (BinaryOutputReliability) SceneIndex() int  { return -1 }

func (a BinaryOutputReliability) String() string {
	switch a {
	case 0x00:
		return "No fault detected"
	case 0x01:
		return "No Sensor"
	case 0x02:
		return "Over Range"
	case 0x03:
		return "Under Range"
	case 0x04:
		return "Open Loop"
	case 0x05:
		return "Shorted Loop"
	case 0x06:
		return "No Output"
	case 0x07:
		return "Unreliable (other)"
	case 0x08:
		return "Process Error"
	case 0x09:
		return "Multi state fault"
	case 0x0A:
		return "Configuration Error"
	}
	return zcl.Sprintf("%v", zcl.Zenum8(a))
}

// IsNoFaultDetected checks if BinaryOutputReliability equals the value for No fault detected (0x00)
func (a BinaryOutputReliability) IsNoFaultDetected() bool { return a == 0x00 }

// SetNoFaultDetected sets BinaryOutputReliability to No fault detected (0x00)
func (a *BinaryOutputReliability) SetNoFaultDetected() { *a = 0x00 }

// IsNoSensor checks if BinaryOutputReliability equals the value for No Sensor (0x01)
func (a BinaryOutputReliability) IsNoSensor() bool { return a == 0x01 }

// SetNoSensor sets BinaryOutputReliability to No Sensor (0x01)
func (a *BinaryOutputReliability) SetNoSensor() { *a = 0x01 }

// IsOverRange checks if BinaryOutputReliability equals the value for Over Range (0x02)
func (a BinaryOutputReliability) IsOverRange() bool { return a == 0x02 }

// SetOverRange sets BinaryOutputReliability to Over Range (0x02)
func (a *BinaryOutputReliability) SetOverRange() { *a = 0x02 }

// IsUnderRange checks if BinaryOutputReliability equals the value for Under Range (0x03)
func (a BinaryOutputReliability) IsUnderRange() bool { return a == 0x03 }

// SetUnderRange sets BinaryOutputReliability to Under Range (0x03)
func (a *BinaryOutputReliability) SetUnderRange() { *a = 0x03 }

// IsOpenLoop checks if BinaryOutputReliability equals the value for Open Loop (0x04)
func (a BinaryOutputReliability) IsOpenLoop() bool { return a == 0x04 }

// SetOpenLoop sets BinaryOutputReliability to Open Loop (0x04)
func (a *BinaryOutputReliability) SetOpenLoop() { *a = 0x04 }

// IsShortedLoop checks if BinaryOutputReliability equals the value for Shorted Loop (0x05)
func (a BinaryOutputReliability) IsShortedLoop() bool { return a == 0x05 }

// SetShortedLoop sets BinaryOutputReliability to Shorted Loop (0x05)
func (a *BinaryOutputReliability) SetShortedLoop() { *a = 0x05 }

// IsNoOutput checks if BinaryOutputReliability equals the value for No Output (0x06)
func (a BinaryOutputReliability) IsNoOutput() bool { return a == 0x06 }

// SetNoOutput sets BinaryOutputReliability to No Output (0x06)
func (a *BinaryOutputReliability) SetNoOutput() { *a = 0x06 }

// IsUnreliableOther checks if BinaryOutputReliability equals the value for Unreliable (other) (0x07)
func (a BinaryOutputReliability) IsUnreliableOther() bool { return a == 0x07 }

// SetUnreliableOther sets BinaryOutputReliability to Unreliable (other) (0x07)
func (a *BinaryOutputReliability) SetUnreliableOther() { *a = 0x07 }

// IsProcessError checks if BinaryOutputReliability equals the value for Process Error (0x08)
func (a BinaryOutputReliability) IsProcessError() bool { return a == 0x08 }

// SetProcessError sets BinaryOutputReliability to Process Error (0x08)
func (a *BinaryOutputReliability) SetProcessError() { *a = 0x08 }

// IsMultiStateFault checks if BinaryOutputReliability equals the value for Multi state fault (0x09)
func (a BinaryOutputReliability) IsMultiStateFault() bool { return a == 0x09 }

// SetMultiStateFault sets BinaryOutputReliability to Multi state fault (0x09)
func (a *BinaryOutputReliability) SetMultiStateFault() { *a = 0x09 }

// IsConfigurationError checks if BinaryOutputReliability equals the value for Configuration Error (0x0A)
func (a BinaryOutputReliability) IsConfigurationError() bool { return a == 0x0A }

// SetConfigurationError sets BinaryOutputReliability to Configuration Error (0x0A)
func (a *BinaryOutputReliability) SetConfigurationError() { *a = 0x0A }

// BinaryOutputRelinquishDefault is an autogenerated attribute in the BinaryOutputBasic cluster
type BinaryOutputRelinquishDefault zcl.Zbool

const BinaryOutputRelinquishDefaultAttr zcl.AttrID = 104

func (a BinaryOutputRelinquishDefault) ID() zcl.AttrID                         { return BinaryOutputRelinquishDefaultAttr }
func (a BinaryOutputRelinquishDefault) Cluster() zcl.ClusterID                 { return BinaryOutputBasicID }
func (a *BinaryOutputRelinquishDefault) Value() *BinaryOutputRelinquishDefault { return a }
func (a BinaryOutputRelinquishDefault) MarshalZcl() ([]byte, error) {
	return zcl.Zbool(a).MarshalZcl()
}
func (a *BinaryOutputRelinquishDefault) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbool)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryOutputRelinquishDefault(*nt)
	return br, err
}
func (BinaryOutputRelinquishDefault) Name() string     { return "Binary Output Relinquish Default" }
func (BinaryOutputRelinquishDefault) Readable() bool   { return true }
func (BinaryOutputRelinquishDefault) Writable() bool   { return true }
func (BinaryOutputRelinquishDefault) Reportable() bool { return false }
func (BinaryOutputRelinquishDefault) SceneIndex() int  { return -1 }

func (a BinaryOutputRelinquishDefault) String() string {
	return zcl.Sprintf("%v", zcl.Zbool(a))
}

// BinaryOutputStatusFlags is an autogenerated attribute in the BinaryOutputBasic cluster
type BinaryOutputStatusFlags zcl.Zbmp8

const BinaryOutputStatusFlagsAttr zcl.AttrID = 111

func (a BinaryOutputStatusFlags) ID() zcl.AttrID                   { return BinaryOutputStatusFlagsAttr }
func (a BinaryOutputStatusFlags) Cluster() zcl.ClusterID           { return BinaryOutputBasicID }
func (a *BinaryOutputStatusFlags) Value() *BinaryOutputStatusFlags { return a }
func (a BinaryOutputStatusFlags) MarshalZcl() ([]byte, error) {
	return zcl.Zbmp8(a).MarshalZcl()
}
func (a *BinaryOutputStatusFlags) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbmp8)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryOutputStatusFlags(*nt)
	return br, err
}
func (BinaryOutputStatusFlags) Name() string     { return "Binary Output Status Flags" }
func (BinaryOutputStatusFlags) Readable() bool   { return true }
func (BinaryOutputStatusFlags) Writable() bool   { return false }
func (BinaryOutputStatusFlags) Reportable() bool { return true }
func (BinaryOutputStatusFlags) SceneIndex() int  { return -1 }

func (a BinaryOutputStatusFlags) String() string {
	var bstr []string
	if a.IsInAlarm() {
		bstr = append(bstr, "In Alarm")
	}
	if a.IsFault() {
		bstr = append(bstr, "Fault")
	}
	if a.IsOveridden() {
		bstr = append(bstr, "Overidden")
	}
	if a.IsOutOfService() {
		bstr = append(bstr, "Out of Service")
	}
	return zcl.StrJoin(bstr, ", ")
}

func (a BinaryOutputStatusFlags) IsInAlarm() bool {
	return zcl.BitmapTest([]byte(a), 0)
}
func (a *BinaryOutputStatusFlags) SetInAlarm(b bool) {
	*a = BinaryOutputStatusFlags(zcl.BitmapSet([]byte(*a), 0, b))
}

func (a BinaryOutputStatusFlags) IsFault() bool {
	return zcl.BitmapTest([]byte(a), 1)
}
func (a *BinaryOutputStatusFlags) SetFault(b bool) {
	*a = BinaryOutputStatusFlags(zcl.BitmapSet([]byte(*a), 1, b))
}

func (a BinaryOutputStatusFlags) IsOveridden() bool {
	return zcl.BitmapTest([]byte(a), 2)
}
func (a *BinaryOutputStatusFlags) SetOveridden(b bool) {
	*a = BinaryOutputStatusFlags(zcl.BitmapSet([]byte(*a), 2, b))
}

func (a BinaryOutputStatusFlags) IsOutOfService() bool {
	return zcl.BitmapTest([]byte(a), 3)
}
func (a *BinaryOutputStatusFlags) SetOutOfService(b bool) {
	*a = BinaryOutputStatusFlags(zcl.BitmapSet([]byte(*a), 3, b))
}

// BinaryOutputApplicationType is an autogenerated attribute in the BinaryOutputBasic cluster
type BinaryOutputApplicationType zcl.Zu32

const BinaryOutputApplicationTypeAttr zcl.AttrID = 256

func (a BinaryOutputApplicationType) ID() zcl.AttrID                       { return BinaryOutputApplicationTypeAttr }
func (a BinaryOutputApplicationType) Cluster() zcl.ClusterID               { return BinaryOutputBasicID }
func (a *BinaryOutputApplicationType) Value() *BinaryOutputApplicationType { return a }
func (a BinaryOutputApplicationType) MarshalZcl() ([]byte, error) {
	return zcl.Zu32(a).MarshalZcl()
}
func (a *BinaryOutputApplicationType) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu32)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryOutputApplicationType(*nt)
	return br, err
}
func (BinaryOutputApplicationType) Name() string     { return "Binary Output Application Type" }
func (BinaryOutputApplicationType) Readable() bool   { return true }
func (BinaryOutputApplicationType) Writable() bool   { return false }
func (BinaryOutputApplicationType) Reportable() bool { return false }
func (BinaryOutputApplicationType) SceneIndex() int  { return -1 }

func (a BinaryOutputApplicationType) String() string {
	return zcl.Sprintf("%v", zcl.Zu32(a))
}

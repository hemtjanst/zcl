// An interface for setting an analog value, typically used as a control system parameter, and accessing various characteristics of that value.
package general

import (
	"hemtjan.st/zcl"
)

// AnalogValueBasic
const AnalogValueBasicID zcl.ClusterID = 14

var AnalogValueBasicCluster = zcl.Cluster{
	ServerCmd: map[zcl.CommandID]func() zcl.Command{},
	ClientCmd: map[zcl.CommandID]func() zcl.Command{},
	ServerAttr: map[zcl.AttrID]func() zcl.Attr{
		AnalogValueDescriptionAttr:       func() zcl.Attr { return new(AnalogValueDescription) },
		AnalogValueOutOfServiceAttr:      func() zcl.Attr { return new(AnalogValueOutOfService) },
		AnalogValuePresentValueAttr:      func() zcl.Attr { return new(AnalogValuePresentValue) },
		AnalogValuePriorityArrayAttr:     func() zcl.Attr { return new(AnalogValuePriorityArray) },
		AnalogValueReliabilityAttr:       func() zcl.Attr { return new(AnalogValueReliability) },
		AnalogValueRelinquishDefaultAttr: func() zcl.Attr { return new(AnalogValueRelinquishDefault) },
		AnalogValueResolutionAttr:        func() zcl.Attr { return new(AnalogValueResolution) },
		AnalogValueStatusFlagsAttr:       func() zcl.Attr { return new(AnalogValueStatusFlags) },
		AnalogValueEngineeringUnitsAttr:  func() zcl.Attr { return new(AnalogValueEngineeringUnits) },
		AnalogValueApplicationTypeAttr:   func() zcl.Attr { return new(AnalogValueApplicationType) },
	},
	ClientAttr: map[zcl.AttrID]func() zcl.Attr{},
	SceneAttr:  []zcl.AttrID{},
}

// AnalogValueDescription is an autogenerated attribute in the AnalogValueBasic cluster
type AnalogValueDescription zcl.Zcstring

const AnalogValueDescriptionAttr zcl.AttrID = 28

func (AnalogValueDescription) ID() zcl.AttrID                    { return AnalogValueDescriptionAttr }
func (AnalogValueDescription) Cluster() zcl.ClusterID            { return AnalogValueBasicID }
func (AnalogValueDescription) Name() string                      { return "Analog Value Description" }
func (AnalogValueDescription) Readable() bool                    { return true }
func (AnalogValueDescription) Writable() bool                    { return true }
func (AnalogValueDescription) Reportable() bool                  { return false }
func (AnalogValueDescription) SceneIndex() int                   { return -1 }
func (a *AnalogValueDescription) Value() *AnalogValueDescription { return a }
func (a AnalogValueDescription) MarshalZcl() ([]byte, error)     { return zcl.Zcstring(a).MarshalZcl() }

func (a *AnalogValueDescription) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zcstring)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogValueDescription(*nt)
	return br, err
}

func (a AnalogValueDescription) String() string {
	return zcl.Sprintf("%v", zcl.Zcstring(a))
}

// AnalogValueOutOfService is an autogenerated attribute in the AnalogValueBasic cluster
type AnalogValueOutOfService zcl.Zbool

const AnalogValueOutOfServiceAttr zcl.AttrID = 81

func (AnalogValueOutOfService) ID() zcl.AttrID                     { return AnalogValueOutOfServiceAttr }
func (AnalogValueOutOfService) Cluster() zcl.ClusterID             { return AnalogValueBasicID }
func (AnalogValueOutOfService) Name() string                       { return "Analog Value Out of service" }
func (AnalogValueOutOfService) Readable() bool                     { return true }
func (AnalogValueOutOfService) Writable() bool                     { return true }
func (AnalogValueOutOfService) Reportable() bool                   { return false }
func (AnalogValueOutOfService) SceneIndex() int                    { return -1 }
func (a *AnalogValueOutOfService) Value() *AnalogValueOutOfService { return a }
func (a AnalogValueOutOfService) MarshalZcl() ([]byte, error)      { return zcl.Zbool(a).MarshalZcl() }

func (a *AnalogValueOutOfService) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbool)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogValueOutOfService(*nt)
	return br, err
}

func (a AnalogValueOutOfService) String() string {
	return zcl.Sprintf("%v", zcl.Zbool(a))
}

// AnalogValuePresentValue is an autogenerated attribute in the AnalogValueBasic cluster
type AnalogValuePresentValue zcl.Zfloat

const AnalogValuePresentValueAttr zcl.AttrID = 85

func (AnalogValuePresentValue) ID() zcl.AttrID                     { return AnalogValuePresentValueAttr }
func (AnalogValuePresentValue) Cluster() zcl.ClusterID             { return AnalogValueBasicID }
func (AnalogValuePresentValue) Name() string                       { return "Analog Value Present value" }
func (AnalogValuePresentValue) Readable() bool                     { return true }
func (AnalogValuePresentValue) Writable() bool                     { return true }
func (AnalogValuePresentValue) Reportable() bool                   { return true }
func (AnalogValuePresentValue) SceneIndex() int                    { return -1 }
func (a *AnalogValuePresentValue) Value() *AnalogValuePresentValue { return a }
func (a AnalogValuePresentValue) MarshalZcl() ([]byte, error)      { return zcl.Zfloat(a).MarshalZcl() }

func (a *AnalogValuePresentValue) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zfloat)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogValuePresentValue(*nt)
	return br, err
}

func (a AnalogValuePresentValue) String() string {
	return zcl.Sprintf("%v", zcl.Zfloat(a))
}

// AnalogValuePriorityArray is an autogenerated attribute in the AnalogValueBasic cluster
type AnalogValuePriorityArray zcl.Zarray

const AnalogValuePriorityArrayAttr zcl.AttrID = 87

func (AnalogValuePriorityArray) ID() zcl.AttrID                      { return AnalogValuePriorityArrayAttr }
func (AnalogValuePriorityArray) Cluster() zcl.ClusterID              { return AnalogValueBasicID }
func (AnalogValuePriorityArray) Name() string                        { return "Analog Value Priority Array" }
func (AnalogValuePriorityArray) Readable() bool                      { return true }
func (AnalogValuePriorityArray) Writable() bool                      { return true }
func (AnalogValuePriorityArray) Reportable() bool                    { return false }
func (AnalogValuePriorityArray) SceneIndex() int                     { return -1 }
func (a *AnalogValuePriorityArray) Value() *AnalogValuePriorityArray { return a }
func (a AnalogValuePriorityArray) MarshalZcl() ([]byte, error)       { return zcl.Zarray(a).MarshalZcl() }

func (a *AnalogValuePriorityArray) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zarray)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogValuePriorityArray(*nt)
	return br, err
}

func (a AnalogValuePriorityArray) String() string {
	return zcl.Sprintf("%v", zcl.Zarray(a))
}

// AnalogValueReliability is an autogenerated attribute in the AnalogValueBasic cluster
type AnalogValueReliability zcl.Zenum8

const AnalogValueReliabilityAttr zcl.AttrID = 103

func (AnalogValueReliability) ID() zcl.AttrID                    { return AnalogValueReliabilityAttr }
func (AnalogValueReliability) Cluster() zcl.ClusterID            { return AnalogValueBasicID }
func (AnalogValueReliability) Name() string                      { return "Analog Value Reliability" }
func (AnalogValueReliability) Readable() bool                    { return true }
func (AnalogValueReliability) Writable() bool                    { return true }
func (AnalogValueReliability) Reportable() bool                  { return false }
func (AnalogValueReliability) SceneIndex() int                   { return -1 }
func (a *AnalogValueReliability) Value() *AnalogValueReliability { return a }
func (a AnalogValueReliability) MarshalZcl() ([]byte, error)     { return zcl.Zenum8(a).MarshalZcl() }

func (a *AnalogValueReliability) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zenum8)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogValueReliability(*nt)
	return br, err
}

func (a AnalogValueReliability) String() string {
	switch a {
	case 0x00:
		return "No fault detected"
	case 0x01:
		return "No Sensor"
	case 0x02:
		return "Over Range"
	case 0x03:
		return "Under Range"
	case 0x04:
		return "Open Loop"
	case 0x05:
		return "Shorted Loop"
	case 0x06:
		return "No Output"
	case 0x07:
		return "Unreliable (other)"
	case 0x08:
		return "Process Error"
	case 0x09:
		return "Multi state fault"
	case 0x0A:
		return "Configuration Error"
	}
	return zcl.Sprintf("%v", zcl.Zenum8(a))
}

// IsNoFaultDetected checks if AnalogValueReliability equals the value for No fault detected (0x00)
func (a AnalogValueReliability) IsNoFaultDetected() bool { return a == 0x00 }

// SetNoFaultDetected sets AnalogValueReliability to No fault detected (0x00)
func (a *AnalogValueReliability) SetNoFaultDetected() { *a = 0x00 }

// IsNoSensor checks if AnalogValueReliability equals the value for No Sensor (0x01)
func (a AnalogValueReliability) IsNoSensor() bool { return a == 0x01 }

// SetNoSensor sets AnalogValueReliability to No Sensor (0x01)
func (a *AnalogValueReliability) SetNoSensor() { *a = 0x01 }

// IsOverRange checks if AnalogValueReliability equals the value for Over Range (0x02)
func (a AnalogValueReliability) IsOverRange() bool { return a == 0x02 }

// SetOverRange sets AnalogValueReliability to Over Range (0x02)
func (a *AnalogValueReliability) SetOverRange() { *a = 0x02 }

// IsUnderRange checks if AnalogValueReliability equals the value for Under Range (0x03)
func (a AnalogValueReliability) IsUnderRange() bool { return a == 0x03 }

// SetUnderRange sets AnalogValueReliability to Under Range (0x03)
func (a *AnalogValueReliability) SetUnderRange() { *a = 0x03 }

// IsOpenLoop checks if AnalogValueReliability equals the value for Open Loop (0x04)
func (a AnalogValueReliability) IsOpenLoop() bool { return a == 0x04 }

// SetOpenLoop sets AnalogValueReliability to Open Loop (0x04)
func (a *AnalogValueReliability) SetOpenLoop() { *a = 0x04 }

// IsShortedLoop checks if AnalogValueReliability equals the value for Shorted Loop (0x05)
func (a AnalogValueReliability) IsShortedLoop() bool { return a == 0x05 }

// SetShortedLoop sets AnalogValueReliability to Shorted Loop (0x05)
func (a *AnalogValueReliability) SetShortedLoop() { *a = 0x05 }

// IsNoOutput checks if AnalogValueReliability equals the value for No Output (0x06)
func (a AnalogValueReliability) IsNoOutput() bool { return a == 0x06 }

// SetNoOutput sets AnalogValueReliability to No Output (0x06)
func (a *AnalogValueReliability) SetNoOutput() { *a = 0x06 }

// IsUnreliableOther checks if AnalogValueReliability equals the value for Unreliable (other) (0x07)
func (a AnalogValueReliability) IsUnreliableOther() bool { return a == 0x07 }

// SetUnreliableOther sets AnalogValueReliability to Unreliable (other) (0x07)
func (a *AnalogValueReliability) SetUnreliableOther() { *a = 0x07 }

// IsProcessError checks if AnalogValueReliability equals the value for Process Error (0x08)
func (a AnalogValueReliability) IsProcessError() bool { return a == 0x08 }

// SetProcessError sets AnalogValueReliability to Process Error (0x08)
func (a *AnalogValueReliability) SetProcessError() { *a = 0x08 }

// IsMultiStateFault checks if AnalogValueReliability equals the value for Multi state fault (0x09)
func (a AnalogValueReliability) IsMultiStateFault() bool { return a == 0x09 }

// SetMultiStateFault sets AnalogValueReliability to Multi state fault (0x09)
func (a *AnalogValueReliability) SetMultiStateFault() { *a = 0x09 }

// IsConfigurationError checks if AnalogValueReliability equals the value for Configuration Error (0x0A)
func (a AnalogValueReliability) IsConfigurationError() bool { return a == 0x0A }

// SetConfigurationError sets AnalogValueReliability to Configuration Error (0x0A)
func (a *AnalogValueReliability) SetConfigurationError() { *a = 0x0A }

// AnalogValueRelinquishDefault is an autogenerated attribute in the AnalogValueBasic cluster
type AnalogValueRelinquishDefault zcl.Zfloat

const AnalogValueRelinquishDefaultAttr zcl.AttrID = 104

func (AnalogValueRelinquishDefault) ID() zcl.AttrID                          { return AnalogValueRelinquishDefaultAttr }
func (AnalogValueRelinquishDefault) Cluster() zcl.ClusterID                  { return AnalogValueBasicID }
func (AnalogValueRelinquishDefault) Name() string                            { return "Analog Value Relinquish Default" }
func (AnalogValueRelinquishDefault) Readable() bool                          { return true }
func (AnalogValueRelinquishDefault) Writable() bool                          { return true }
func (AnalogValueRelinquishDefault) Reportable() bool                        { return false }
func (AnalogValueRelinquishDefault) SceneIndex() int                         { return -1 }
func (a *AnalogValueRelinquishDefault) Value() *AnalogValueRelinquishDefault { return a }
func (a AnalogValueRelinquishDefault) MarshalZcl() ([]byte, error)           { return zcl.Zfloat(a).MarshalZcl() }

func (a *AnalogValueRelinquishDefault) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zfloat)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogValueRelinquishDefault(*nt)
	return br, err
}

func (a AnalogValueRelinquishDefault) String() string {
	return zcl.Sprintf("%v", zcl.Zfloat(a))
}

// AnalogValueResolution is an autogenerated attribute in the AnalogValueBasic cluster
type AnalogValueResolution zcl.Zfloat

const AnalogValueResolutionAttr zcl.AttrID = 106

func (AnalogValueResolution) ID() zcl.AttrID                   { return AnalogValueResolutionAttr }
func (AnalogValueResolution) Cluster() zcl.ClusterID           { return AnalogValueBasicID }
func (AnalogValueResolution) Name() string                     { return "Analog Value Resolution" }
func (AnalogValueResolution) Readable() bool                   { return true }
func (AnalogValueResolution) Writable() bool                   { return true }
func (AnalogValueResolution) Reportable() bool                 { return false }
func (AnalogValueResolution) SceneIndex() int                  { return -1 }
func (a *AnalogValueResolution) Value() *AnalogValueResolution { return a }
func (a AnalogValueResolution) MarshalZcl() ([]byte, error)    { return zcl.Zfloat(a).MarshalZcl() }

func (a *AnalogValueResolution) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zfloat)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogValueResolution(*nt)
	return br, err
}

func (a AnalogValueResolution) String() string {
	return zcl.Sprintf("%v", zcl.Zfloat(a))
}

// AnalogValueStatusFlags is an autogenerated attribute in the AnalogValueBasic cluster
type AnalogValueStatusFlags zcl.Zbmp8

const AnalogValueStatusFlagsAttr zcl.AttrID = 111

func (AnalogValueStatusFlags) ID() zcl.AttrID                    { return AnalogValueStatusFlagsAttr }
func (AnalogValueStatusFlags) Cluster() zcl.ClusterID            { return AnalogValueBasicID }
func (AnalogValueStatusFlags) Name() string                      { return "Analog Value Status flags" }
func (AnalogValueStatusFlags) Readable() bool                    { return true }
func (AnalogValueStatusFlags) Writable() bool                    { return false }
func (AnalogValueStatusFlags) Reportable() bool                  { return true }
func (AnalogValueStatusFlags) SceneIndex() int                   { return -1 }
func (a *AnalogValueStatusFlags) Value() *AnalogValueStatusFlags { return a }
func (a AnalogValueStatusFlags) MarshalZcl() ([]byte, error)     { return zcl.Zbmp8(a).MarshalZcl() }

func (a *AnalogValueStatusFlags) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbmp8)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogValueStatusFlags(*nt)
	return br, err
}

func (a AnalogValueStatusFlags) String() string {
	var bstr []string
	if a.IsInAlarm() {
		bstr = append(bstr, "In Alarm")
	}
	if a.IsFault() {
		bstr = append(bstr, "Fault")
	}
	if a.IsOveridden() {
		bstr = append(bstr, "Overidden")
	}
	if a.IsOutOfService() {
		bstr = append(bstr, "Out of Service")
	}
	return zcl.StrJoin(bstr, ", ")
}

func (a AnalogValueStatusFlags) IsInAlarm() bool {
	return zcl.BitmapTest([]byte(a), 0)
}
func (a *AnalogValueStatusFlags) SetInAlarm(b bool) {
	*a = AnalogValueStatusFlags(zcl.BitmapSet([]byte(*a), 0, b))
}

func (a AnalogValueStatusFlags) IsFault() bool {
	return zcl.BitmapTest([]byte(a), 1)
}
func (a *AnalogValueStatusFlags) SetFault(b bool) {
	*a = AnalogValueStatusFlags(zcl.BitmapSet([]byte(*a), 1, b))
}

func (a AnalogValueStatusFlags) IsOveridden() bool {
	return zcl.BitmapTest([]byte(a), 2)
}
func (a *AnalogValueStatusFlags) SetOveridden(b bool) {
	*a = AnalogValueStatusFlags(zcl.BitmapSet([]byte(*a), 2, b))
}

func (a AnalogValueStatusFlags) IsOutOfService() bool {
	return zcl.BitmapTest([]byte(a), 3)
}
func (a *AnalogValueStatusFlags) SetOutOfService(b bool) {
	*a = AnalogValueStatusFlags(zcl.BitmapSet([]byte(*a), 3, b))
}

// AnalogValueEngineeringUnits is an autogenerated attribute in the AnalogValueBasic cluster
type AnalogValueEngineeringUnits zcl.EngineeringUnit

const AnalogValueEngineeringUnitsAttr zcl.AttrID = 117

func (AnalogValueEngineeringUnits) ID() zcl.AttrID                         { return AnalogValueEngineeringUnitsAttr }
func (AnalogValueEngineeringUnits) Cluster() zcl.ClusterID                 { return AnalogValueBasicID }
func (AnalogValueEngineeringUnits) Name() string                           { return "Analog Value Engineering Units" }
func (AnalogValueEngineeringUnits) Readable() bool                         { return true }
func (AnalogValueEngineeringUnits) Writable() bool                         { return true }
func (AnalogValueEngineeringUnits) Reportable() bool                       { return false }
func (AnalogValueEngineeringUnits) SceneIndex() int                        { return -1 }
func (a *AnalogValueEngineeringUnits) Value() *AnalogValueEngineeringUnits { return a }
func (a AnalogValueEngineeringUnits) MarshalZcl() ([]byte, error) {
	return zcl.EngineeringUnit(a).MarshalZcl()
}

func (a *AnalogValueEngineeringUnits) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.EngineeringUnit)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogValueEngineeringUnits(*nt)
	return br, err
}

func (a AnalogValueEngineeringUnits) String() string {
	return zcl.Sprintf("%v", zcl.EngineeringUnit(a))
}

// AnalogValueApplicationType is an autogenerated attribute in the AnalogValueBasic cluster
type AnalogValueApplicationType zcl.Zu32

const AnalogValueApplicationTypeAttr zcl.AttrID = 256

func (AnalogValueApplicationType) ID() zcl.AttrID                        { return AnalogValueApplicationTypeAttr }
func (AnalogValueApplicationType) Cluster() zcl.ClusterID                { return AnalogValueBasicID }
func (AnalogValueApplicationType) Name() string                          { return "Analog Value Application Type" }
func (AnalogValueApplicationType) Readable() bool                        { return true }
func (AnalogValueApplicationType) Writable() bool                        { return false }
func (AnalogValueApplicationType) Reportable() bool                      { return false }
func (AnalogValueApplicationType) SceneIndex() int                       { return -1 }
func (a *AnalogValueApplicationType) Value() *AnalogValueApplicationType { return a }
func (a AnalogValueApplicationType) MarshalZcl() ([]byte, error)         { return zcl.Zu32(a).MarshalZcl() }

func (a *AnalogValueApplicationType) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu32)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogValueApplicationType(*nt)
	return br, err
}

func (a AnalogValueApplicationType) String() string {
	return zcl.Sprintf("%v", zcl.Zu32(a))
}

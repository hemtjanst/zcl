package general

import (
	"hemtjan.st/zcl"
)

// BinaryValueBasic
const BinaryValueBasicID zcl.ClusterID = 17

var BinaryValueBasicCluster = zcl.Cluster{
	ServerCmd: map[zcl.CommandID]func() zcl.Command{},
	ClientCmd: map[zcl.CommandID]func() zcl.Command{},
	ServerAttr: map[zcl.AttrID]func() zcl.Attr{
		BinaryValueActiveTextAttr:        func() zcl.Attr { return new(BinaryValueActiveText) },
		BinaryValueDescriptionAttr:       func() zcl.Attr { return new(BinaryValueDescription) },
		BinaryValueInactiveTextAttr:      func() zcl.Attr { return new(BinaryValueInactiveText) },
		BinaryValueMinimumOffTimeAttr:    func() zcl.Attr { return new(BinaryValueMinimumOffTime) },
		BinaryValueMaximumOffTimeAttr:    func() zcl.Attr { return new(BinaryValueMaximumOffTime) },
		BinaryValueOutOfServiceAttr:      func() zcl.Attr { return new(BinaryValueOutOfService) },
		BinaryValuePresentValueAttr:      func() zcl.Attr { return new(BinaryValuePresentValue) },
		BinaryValuePriorityArrayAttr:     func() zcl.Attr { return new(BinaryValuePriorityArray) },
		BinaryValueReliabilityAttr:       func() zcl.Attr { return new(BinaryValueReliability) },
		BinaryValueRelinquishDefaultAttr: func() zcl.Attr { return new(BinaryValueRelinquishDefault) },
		BinaryValueStatusFlagsAttr:       func() zcl.Attr { return new(BinaryValueStatusFlags) },
		BinaryValueApplicationTypeAttr:   func() zcl.Attr { return new(BinaryValueApplicationType) },
	},
	ClientAttr: map[zcl.AttrID]func() zcl.Attr{},
	SceneAttr:  []zcl.AttrID{},
}

// BinaryValueActiveText is an autogenerated attribute in the BinaryValueBasic cluster
type BinaryValueActiveText zcl.Zcstring

const BinaryValueActiveTextAttr zcl.AttrID = 4

func (BinaryValueActiveText) ID() zcl.AttrID                   { return BinaryValueActiveTextAttr }
func (BinaryValueActiveText) Cluster() zcl.ClusterID           { return BinaryValueBasicID }
func (BinaryValueActiveText) Name() string                     { return "Binary Value Active Text" }
func (BinaryValueActiveText) Readable() bool                   { return true }
func (BinaryValueActiveText) Writable() bool                   { return true }
func (BinaryValueActiveText) Reportable() bool                 { return false }
func (BinaryValueActiveText) SceneIndex() int                  { return -1 }
func (a *BinaryValueActiveText) Value() *BinaryValueActiveText { return a }
func (a BinaryValueActiveText) MarshalZcl() ([]byte, error)    { return zcl.Zcstring(a).MarshalZcl() }

func (a *BinaryValueActiveText) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zcstring)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryValueActiveText(*nt)
	return br, err
}

func (a BinaryValueActiveText) String() string {
	return zcl.Sprintf("%v", zcl.Zcstring(a))
}

// BinaryValueDescription is an autogenerated attribute in the BinaryValueBasic cluster
type BinaryValueDescription zcl.Zcstring

const BinaryValueDescriptionAttr zcl.AttrID = 28

func (BinaryValueDescription) ID() zcl.AttrID                    { return BinaryValueDescriptionAttr }
func (BinaryValueDescription) Cluster() zcl.ClusterID            { return BinaryValueBasicID }
func (BinaryValueDescription) Name() string                      { return "Binary Value Description" }
func (BinaryValueDescription) Readable() bool                    { return true }
func (BinaryValueDescription) Writable() bool                    { return true }
func (BinaryValueDescription) Reportable() bool                  { return false }
func (BinaryValueDescription) SceneIndex() int                   { return -1 }
func (a *BinaryValueDescription) Value() *BinaryValueDescription { return a }
func (a BinaryValueDescription) MarshalZcl() ([]byte, error)     { return zcl.Zcstring(a).MarshalZcl() }

func (a *BinaryValueDescription) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zcstring)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryValueDescription(*nt)
	return br, err
}

func (a BinaryValueDescription) String() string {
	return zcl.Sprintf("%v", zcl.Zcstring(a))
}

// BinaryValueInactiveText is an autogenerated attribute in the BinaryValueBasic cluster
type BinaryValueInactiveText zcl.Zcstring

const BinaryValueInactiveTextAttr zcl.AttrID = 46

func (BinaryValueInactiveText) ID() zcl.AttrID                     { return BinaryValueInactiveTextAttr }
func (BinaryValueInactiveText) Cluster() zcl.ClusterID             { return BinaryValueBasicID }
func (BinaryValueInactiveText) Name() string                       { return "Binary Value Inactive Text" }
func (BinaryValueInactiveText) Readable() bool                     { return true }
func (BinaryValueInactiveText) Writable() bool                     { return true }
func (BinaryValueInactiveText) Reportable() bool                   { return false }
func (BinaryValueInactiveText) SceneIndex() int                    { return -1 }
func (a *BinaryValueInactiveText) Value() *BinaryValueInactiveText { return a }
func (a BinaryValueInactiveText) MarshalZcl() ([]byte, error)      { return zcl.Zcstring(a).MarshalZcl() }

func (a *BinaryValueInactiveText) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zcstring)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryValueInactiveText(*nt)
	return br, err
}

func (a BinaryValueInactiveText) String() string {
	return zcl.Sprintf("%v", zcl.Zcstring(a))
}

// BinaryValueMinimumOffTime is an autogenerated attribute in the BinaryValueBasic cluster
type BinaryValueMinimumOffTime zcl.Zu32

const BinaryValueMinimumOffTimeAttr zcl.AttrID = 66

func (BinaryValueMinimumOffTime) ID() zcl.AttrID                       { return BinaryValueMinimumOffTimeAttr }
func (BinaryValueMinimumOffTime) Cluster() zcl.ClusterID               { return BinaryValueBasicID }
func (BinaryValueMinimumOffTime) Name() string                         { return "Binary Value Minimum Off Time" }
func (BinaryValueMinimumOffTime) Readable() bool                       { return true }
func (BinaryValueMinimumOffTime) Writable() bool                       { return true }
func (BinaryValueMinimumOffTime) Reportable() bool                     { return false }
func (BinaryValueMinimumOffTime) SceneIndex() int                      { return -1 }
func (a *BinaryValueMinimumOffTime) Value() *BinaryValueMinimumOffTime { return a }
func (a BinaryValueMinimumOffTime) MarshalZcl() ([]byte, error)        { return zcl.Zu32(a).MarshalZcl() }

func (a *BinaryValueMinimumOffTime) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu32)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryValueMinimumOffTime(*nt)
	return br, err
}

func (a BinaryValueMinimumOffTime) String() string {
	return zcl.Sprintf("%v", zcl.Zu32(a))
}

// BinaryValueMaximumOffTime is an autogenerated attribute in the BinaryValueBasic cluster
type BinaryValueMaximumOffTime zcl.Zu32

const BinaryValueMaximumOffTimeAttr zcl.AttrID = 67

func (BinaryValueMaximumOffTime) ID() zcl.AttrID                       { return BinaryValueMaximumOffTimeAttr }
func (BinaryValueMaximumOffTime) Cluster() zcl.ClusterID               { return BinaryValueBasicID }
func (BinaryValueMaximumOffTime) Name() string                         { return "Binary Value Maximum Off Time" }
func (BinaryValueMaximumOffTime) Readable() bool                       { return true }
func (BinaryValueMaximumOffTime) Writable() bool                       { return true }
func (BinaryValueMaximumOffTime) Reportable() bool                     { return false }
func (BinaryValueMaximumOffTime) SceneIndex() int                      { return -1 }
func (a *BinaryValueMaximumOffTime) Value() *BinaryValueMaximumOffTime { return a }
func (a BinaryValueMaximumOffTime) MarshalZcl() ([]byte, error)        { return zcl.Zu32(a).MarshalZcl() }

func (a *BinaryValueMaximumOffTime) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu32)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryValueMaximumOffTime(*nt)
	return br, err
}

func (a BinaryValueMaximumOffTime) String() string {
	return zcl.Sprintf("%v", zcl.Zu32(a))
}

// BinaryValueOutOfService is an autogenerated attribute in the BinaryValueBasic cluster
type BinaryValueOutOfService zcl.Zbool

const BinaryValueOutOfServiceAttr zcl.AttrID = 81

func (BinaryValueOutOfService) ID() zcl.AttrID                     { return BinaryValueOutOfServiceAttr }
func (BinaryValueOutOfService) Cluster() zcl.ClusterID             { return BinaryValueBasicID }
func (BinaryValueOutOfService) Name() string                       { return "Binary Value Out of Service" }
func (BinaryValueOutOfService) Readable() bool                     { return true }
func (BinaryValueOutOfService) Writable() bool                     { return true }
func (BinaryValueOutOfService) Reportable() bool                   { return false }
func (BinaryValueOutOfService) SceneIndex() int                    { return -1 }
func (a *BinaryValueOutOfService) Value() *BinaryValueOutOfService { return a }
func (a BinaryValueOutOfService) MarshalZcl() ([]byte, error)      { return zcl.Zbool(a).MarshalZcl() }

func (a *BinaryValueOutOfService) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbool)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryValueOutOfService(*nt)
	return br, err
}

func (a BinaryValueOutOfService) String() string {
	return zcl.Sprintf("%v", zcl.Zbool(a))
}

// BinaryValuePresentValue is an autogenerated attribute in the BinaryValueBasic cluster
type BinaryValuePresentValue zcl.Zbool

const BinaryValuePresentValueAttr zcl.AttrID = 85

func (BinaryValuePresentValue) ID() zcl.AttrID                     { return BinaryValuePresentValueAttr }
func (BinaryValuePresentValue) Cluster() zcl.ClusterID             { return BinaryValueBasicID }
func (BinaryValuePresentValue) Name() string                       { return "Binary Value Present Value" }
func (BinaryValuePresentValue) Readable() bool                     { return true }
func (BinaryValuePresentValue) Writable() bool                     { return true }
func (BinaryValuePresentValue) Reportable() bool                   { return true }
func (BinaryValuePresentValue) SceneIndex() int                    { return -1 }
func (a *BinaryValuePresentValue) Value() *BinaryValuePresentValue { return a }
func (a BinaryValuePresentValue) MarshalZcl() ([]byte, error)      { return zcl.Zbool(a).MarshalZcl() }

func (a *BinaryValuePresentValue) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbool)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryValuePresentValue(*nt)
	return br, err
}

func (a BinaryValuePresentValue) String() string {
	return zcl.Sprintf("%v", zcl.Zbool(a))
}

// BinaryValuePriorityArray is an autogenerated attribute in the BinaryValueBasic cluster
type BinaryValuePriorityArray zcl.Zarray

const BinaryValuePriorityArrayAttr zcl.AttrID = 87

func (BinaryValuePriorityArray) ID() zcl.AttrID                      { return BinaryValuePriorityArrayAttr }
func (BinaryValuePriorityArray) Cluster() zcl.ClusterID              { return BinaryValueBasicID }
func (BinaryValuePriorityArray) Name() string                        { return "Binary Value Priority Array" }
func (BinaryValuePriorityArray) Readable() bool                      { return true }
func (BinaryValuePriorityArray) Writable() bool                      { return true }
func (BinaryValuePriorityArray) Reportable() bool                    { return false }
func (BinaryValuePriorityArray) SceneIndex() int                     { return -1 }
func (a *BinaryValuePriorityArray) Value() *BinaryValuePriorityArray { return a }
func (a BinaryValuePriorityArray) MarshalZcl() ([]byte, error)       { return zcl.Zarray(a).MarshalZcl() }

func (a *BinaryValuePriorityArray) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zarray)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryValuePriorityArray(*nt)
	return br, err
}

func (a BinaryValuePriorityArray) String() string {
	return zcl.Sprintf("%v", zcl.Zarray(a))
}

// BinaryValueReliability is an autogenerated attribute in the BinaryValueBasic cluster
type BinaryValueReliability zcl.Zenum8

const BinaryValueReliabilityAttr zcl.AttrID = 103

func (BinaryValueReliability) ID() zcl.AttrID                    { return BinaryValueReliabilityAttr }
func (BinaryValueReliability) Cluster() zcl.ClusterID            { return BinaryValueBasicID }
func (BinaryValueReliability) Name() string                      { return "Binary Value Reliability" }
func (BinaryValueReliability) Readable() bool                    { return true }
func (BinaryValueReliability) Writable() bool                    { return true }
func (BinaryValueReliability) Reportable() bool                  { return false }
func (BinaryValueReliability) SceneIndex() int                   { return -1 }
func (a *BinaryValueReliability) Value() *BinaryValueReliability { return a }
func (a BinaryValueReliability) MarshalZcl() ([]byte, error)     { return zcl.Zenum8(a).MarshalZcl() }

func (a *BinaryValueReliability) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zenum8)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryValueReliability(*nt)
	return br, err
}

func (a BinaryValueReliability) String() string {
	switch a {
	case 0x00:
		return "No fault detected"
	case 0x01:
		return "No Sensor"
	case 0x02:
		return "Over Range"
	case 0x03:
		return "Under Range"
	case 0x04:
		return "Open Loop"
	case 0x05:
		return "Shorted Loop"
	case 0x06:
		return "No Output"
	case 0x07:
		return "Unreliable (other)"
	case 0x08:
		return "Process Error"
	case 0x09:
		return "Multi state fault"
	case 0x0A:
		return "Configuration Error"
	}
	return zcl.Sprintf("%v", zcl.Zenum8(a))
}

// IsNoFaultDetected checks if BinaryValueReliability equals the value for No fault detected (0x00)
func (a BinaryValueReliability) IsNoFaultDetected() bool { return a == 0x00 }

// SetNoFaultDetected sets BinaryValueReliability to No fault detected (0x00)
func (a *BinaryValueReliability) SetNoFaultDetected() { *a = 0x00 }

// IsNoSensor checks if BinaryValueReliability equals the value for No Sensor (0x01)
func (a BinaryValueReliability) IsNoSensor() bool { return a == 0x01 }

// SetNoSensor sets BinaryValueReliability to No Sensor (0x01)
func (a *BinaryValueReliability) SetNoSensor() { *a = 0x01 }

// IsOverRange checks if BinaryValueReliability equals the value for Over Range (0x02)
func (a BinaryValueReliability) IsOverRange() bool { return a == 0x02 }

// SetOverRange sets BinaryValueReliability to Over Range (0x02)
func (a *BinaryValueReliability) SetOverRange() { *a = 0x02 }

// IsUnderRange checks if BinaryValueReliability equals the value for Under Range (0x03)
func (a BinaryValueReliability) IsUnderRange() bool { return a == 0x03 }

// SetUnderRange sets BinaryValueReliability to Under Range (0x03)
func (a *BinaryValueReliability) SetUnderRange() { *a = 0x03 }

// IsOpenLoop checks if BinaryValueReliability equals the value for Open Loop (0x04)
func (a BinaryValueReliability) IsOpenLoop() bool { return a == 0x04 }

// SetOpenLoop sets BinaryValueReliability to Open Loop (0x04)
func (a *BinaryValueReliability) SetOpenLoop() { *a = 0x04 }

// IsShortedLoop checks if BinaryValueReliability equals the value for Shorted Loop (0x05)
func (a BinaryValueReliability) IsShortedLoop() bool { return a == 0x05 }

// SetShortedLoop sets BinaryValueReliability to Shorted Loop (0x05)
func (a *BinaryValueReliability) SetShortedLoop() { *a = 0x05 }

// IsNoOutput checks if BinaryValueReliability equals the value for No Output (0x06)
func (a BinaryValueReliability) IsNoOutput() bool { return a == 0x06 }

// SetNoOutput sets BinaryValueReliability to No Output (0x06)
func (a *BinaryValueReliability) SetNoOutput() { *a = 0x06 }

// IsUnreliableOther checks if BinaryValueReliability equals the value for Unreliable (other) (0x07)
func (a BinaryValueReliability) IsUnreliableOther() bool { return a == 0x07 }

// SetUnreliableOther sets BinaryValueReliability to Unreliable (other) (0x07)
func (a *BinaryValueReliability) SetUnreliableOther() { *a = 0x07 }

// IsProcessError checks if BinaryValueReliability equals the value for Process Error (0x08)
func (a BinaryValueReliability) IsProcessError() bool { return a == 0x08 }

// SetProcessError sets BinaryValueReliability to Process Error (0x08)
func (a *BinaryValueReliability) SetProcessError() { *a = 0x08 }

// IsMultiStateFault checks if BinaryValueReliability equals the value for Multi state fault (0x09)
func (a BinaryValueReliability) IsMultiStateFault() bool { return a == 0x09 }

// SetMultiStateFault sets BinaryValueReliability to Multi state fault (0x09)
func (a *BinaryValueReliability) SetMultiStateFault() { *a = 0x09 }

// IsConfigurationError checks if BinaryValueReliability equals the value for Configuration Error (0x0A)
func (a BinaryValueReliability) IsConfigurationError() bool { return a == 0x0A }

// SetConfigurationError sets BinaryValueReliability to Configuration Error (0x0A)
func (a *BinaryValueReliability) SetConfigurationError() { *a = 0x0A }

// BinaryValueRelinquishDefault is an autogenerated attribute in the BinaryValueBasic cluster
type BinaryValueRelinquishDefault zcl.Zbool

const BinaryValueRelinquishDefaultAttr zcl.AttrID = 104

func (BinaryValueRelinquishDefault) ID() zcl.AttrID                          { return BinaryValueRelinquishDefaultAttr }
func (BinaryValueRelinquishDefault) Cluster() zcl.ClusterID                  { return BinaryValueBasicID }
func (BinaryValueRelinquishDefault) Name() string                            { return "Binary Value Relinquish Default" }
func (BinaryValueRelinquishDefault) Readable() bool                          { return true }
func (BinaryValueRelinquishDefault) Writable() bool                          { return true }
func (BinaryValueRelinquishDefault) Reportable() bool                        { return false }
func (BinaryValueRelinquishDefault) SceneIndex() int                         { return -1 }
func (a *BinaryValueRelinquishDefault) Value() *BinaryValueRelinquishDefault { return a }
func (a BinaryValueRelinquishDefault) MarshalZcl() ([]byte, error)           { return zcl.Zbool(a).MarshalZcl() }

func (a *BinaryValueRelinquishDefault) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbool)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryValueRelinquishDefault(*nt)
	return br, err
}

func (a BinaryValueRelinquishDefault) String() string {
	return zcl.Sprintf("%v", zcl.Zbool(a))
}

// BinaryValueStatusFlags is an autogenerated attribute in the BinaryValueBasic cluster
type BinaryValueStatusFlags zcl.Zbmp8

const BinaryValueStatusFlagsAttr zcl.AttrID = 111

func (BinaryValueStatusFlags) ID() zcl.AttrID                    { return BinaryValueStatusFlagsAttr }
func (BinaryValueStatusFlags) Cluster() zcl.ClusterID            { return BinaryValueBasicID }
func (BinaryValueStatusFlags) Name() string                      { return "Binary Value Status Flags" }
func (BinaryValueStatusFlags) Readable() bool                    { return true }
func (BinaryValueStatusFlags) Writable() bool                    { return false }
func (BinaryValueStatusFlags) Reportable() bool                  { return true }
func (BinaryValueStatusFlags) SceneIndex() int                   { return -1 }
func (a *BinaryValueStatusFlags) Value() *BinaryValueStatusFlags { return a }
func (a BinaryValueStatusFlags) MarshalZcl() ([]byte, error)     { return zcl.Zbmp8(a).MarshalZcl() }

func (a *BinaryValueStatusFlags) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbmp8)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryValueStatusFlags(*nt)
	return br, err
}

func (a BinaryValueStatusFlags) String() string {
	var bstr []string
	if a.IsInAlarm() {
		bstr = append(bstr, "In Alarm")
	}
	if a.IsFault() {
		bstr = append(bstr, "Fault")
	}
	if a.IsOveridden() {
		bstr = append(bstr, "Overidden")
	}
	if a.IsOutOfService() {
		bstr = append(bstr, "Out of Service")
	}
	return zcl.StrJoin(bstr, ", ")
}

func (a BinaryValueStatusFlags) IsInAlarm() bool {
	return zcl.BitmapTest([]byte(a), 0)
}
func (a *BinaryValueStatusFlags) SetInAlarm(b bool) {
	*a = BinaryValueStatusFlags(zcl.BitmapSet([]byte(*a), 0, b))
}

func (a BinaryValueStatusFlags) IsFault() bool {
	return zcl.BitmapTest([]byte(a), 1)
}
func (a *BinaryValueStatusFlags) SetFault(b bool) {
	*a = BinaryValueStatusFlags(zcl.BitmapSet([]byte(*a), 1, b))
}

func (a BinaryValueStatusFlags) IsOveridden() bool {
	return zcl.BitmapTest([]byte(a), 2)
}
func (a *BinaryValueStatusFlags) SetOveridden(b bool) {
	*a = BinaryValueStatusFlags(zcl.BitmapSet([]byte(*a), 2, b))
}

func (a BinaryValueStatusFlags) IsOutOfService() bool {
	return zcl.BitmapTest([]byte(a), 3)
}
func (a *BinaryValueStatusFlags) SetOutOfService(b bool) {
	*a = BinaryValueStatusFlags(zcl.BitmapSet([]byte(*a), 3, b))
}

// BinaryValueApplicationType is an autogenerated attribute in the BinaryValueBasic cluster
type BinaryValueApplicationType zcl.Zu32

const BinaryValueApplicationTypeAttr zcl.AttrID = 256

func (BinaryValueApplicationType) ID() zcl.AttrID                        { return BinaryValueApplicationTypeAttr }
func (BinaryValueApplicationType) Cluster() zcl.ClusterID                { return BinaryValueBasicID }
func (BinaryValueApplicationType) Name() string                          { return "Binary Value Application Type" }
func (BinaryValueApplicationType) Readable() bool                        { return true }
func (BinaryValueApplicationType) Writable() bool                        { return false }
func (BinaryValueApplicationType) Reportable() bool                      { return false }
func (BinaryValueApplicationType) SceneIndex() int                       { return -1 }
func (a *BinaryValueApplicationType) Value() *BinaryValueApplicationType { return a }
func (a BinaryValueApplicationType) MarshalZcl() ([]byte, error)         { return zcl.Zu32(a).MarshalZcl() }

func (a *BinaryValueApplicationType) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu32)
	br, err := nt.UnmarshalZcl(b)
	*a = BinaryValueApplicationType(*nt)
	return br, err
}

func (a BinaryValueApplicationType) String() string {
	return zcl.Sprintf("%v", zcl.Zu32(a))
}

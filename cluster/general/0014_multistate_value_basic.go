package general

import (
	"neotor.se/zcl"
)

// MultistateValueBasic
const MultistateValueBasicID zcl.ClusterID = 20

var MultistateValueBasicCluster = zcl.Cluster{
	ServerCmd: map[zcl.CommandID]func() zcl.Command{},
	ClientCmd: map[zcl.CommandID]func() zcl.Command{},
	ServerAttr: map[zcl.AttrID]func() zcl.Attr{
		MultiValueStateTextAttr:         func() zcl.Attr { return new(MultiValueStateText) },
		MultiValueDescriptionAttr:       func() zcl.Attr { return new(MultiValueDescription) },
		MultiValueNumberOfStatesAttr:    func() zcl.Attr { return new(MultiValueNumberOfStates) },
		MultiValueOutOfServiceAttr:      func() zcl.Attr { return new(MultiValueOutOfService) },
		MultiValuePresentValueAttr:      func() zcl.Attr { return new(MultiValuePresentValue) },
		MultiValuePriorityArrayAttr:     func() zcl.Attr { return new(MultiValuePriorityArray) },
		MultiValueReliabilityAttr:       func() zcl.Attr { return new(MultiValueReliability) },
		MultiValueRelinquishDefaultAttr: func() zcl.Attr { return new(MultiValueRelinquishDefault) },
		MultiValueStatusFlagsAttr:       func() zcl.Attr { return new(MultiValueStatusFlags) },
		MultiValueApplicationTypeAttr:   func() zcl.Attr { return new(MultiValueApplicationType) },
	},
	ClientAttr: map[zcl.AttrID]func() zcl.Attr{},
	SceneAttr:  []zcl.AttrID{},
}

// MultiValueStateText is an autogenerated attribute in the MultistateValueBasic cluster
type MultiValueStateText zcl.Zcstring

const MultiValueStateTextAttr zcl.AttrID = 14

func (MultiValueStateText) ID() zcl.AttrID                 { return MultiValueStateTextAttr }
func (MultiValueStateText) Cluster() zcl.ClusterID         { return MultistateValueBasicID }
func (MultiValueStateText) Name() string                   { return "Multi Value State Text" }
func (MultiValueStateText) Readable() bool                 { return true }
func (MultiValueStateText) Writable() bool                 { return true }
func (MultiValueStateText) Reportable() bool               { return false }
func (MultiValueStateText) SceneIndex() int                { return -1 }
func (a *MultiValueStateText) Value() *MultiValueStateText { return a }
func (a MultiValueStateText) MarshalZcl() ([]byte, error)  { return zcl.Zcstring(a).MarshalZcl() }

func (a *MultiValueStateText) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zcstring)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiValueStateText(*nt)
	return br, err
}

func (a MultiValueStateText) String() string {
	return zcl.Sprintf("%v", zcl.Zcstring(a))
}

// MultiValueDescription is an autogenerated attribute in the MultistateValueBasic cluster
type MultiValueDescription zcl.Zcstring

const MultiValueDescriptionAttr zcl.AttrID = 28

func (MultiValueDescription) ID() zcl.AttrID                   { return MultiValueDescriptionAttr }
func (MultiValueDescription) Cluster() zcl.ClusterID           { return MultistateValueBasicID }
func (MultiValueDescription) Name() string                     { return "Multi Value Description" }
func (MultiValueDescription) Readable() bool                   { return true }
func (MultiValueDescription) Writable() bool                   { return true }
func (MultiValueDescription) Reportable() bool                 { return false }
func (MultiValueDescription) SceneIndex() int                  { return -1 }
func (a *MultiValueDescription) Value() *MultiValueDescription { return a }
func (a MultiValueDescription) MarshalZcl() ([]byte, error)    { return zcl.Zcstring(a).MarshalZcl() }

func (a *MultiValueDescription) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zcstring)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiValueDescription(*nt)
	return br, err
}

func (a MultiValueDescription) String() string {
	return zcl.Sprintf("%v", zcl.Zcstring(a))
}

// MultiValueNumberOfStates is an autogenerated attribute in the MultistateValueBasic cluster
type MultiValueNumberOfStates zcl.Zu16

const MultiValueNumberOfStatesAttr zcl.AttrID = 74

func (MultiValueNumberOfStates) ID() zcl.AttrID                      { return MultiValueNumberOfStatesAttr }
func (MultiValueNumberOfStates) Cluster() zcl.ClusterID              { return MultistateValueBasicID }
func (MultiValueNumberOfStates) Name() string                        { return "Multi Value Number of states" }
func (MultiValueNumberOfStates) Readable() bool                      { return true }
func (MultiValueNumberOfStates) Writable() bool                      { return true }
func (MultiValueNumberOfStates) Reportable() bool                    { return false }
func (MultiValueNumberOfStates) SceneIndex() int                     { return -1 }
func (a *MultiValueNumberOfStates) Value() *MultiValueNumberOfStates { return a }
func (a MultiValueNumberOfStates) MarshalZcl() ([]byte, error)       { return zcl.Zu16(a).MarshalZcl() }

func (a *MultiValueNumberOfStates) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiValueNumberOfStates(*nt)
	return br, err
}

func (a MultiValueNumberOfStates) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

// MultiValueOutOfService is an autogenerated attribute in the MultistateValueBasic cluster
type MultiValueOutOfService zcl.Zbool

const MultiValueOutOfServiceAttr zcl.AttrID = 81

func (MultiValueOutOfService) ID() zcl.AttrID                    { return MultiValueOutOfServiceAttr }
func (MultiValueOutOfService) Cluster() zcl.ClusterID            { return MultistateValueBasicID }
func (MultiValueOutOfService) Name() string                      { return "Multi Value Out of service" }
func (MultiValueOutOfService) Readable() bool                    { return true }
func (MultiValueOutOfService) Writable() bool                    { return true }
func (MultiValueOutOfService) Reportable() bool                  { return false }
func (MultiValueOutOfService) SceneIndex() int                   { return -1 }
func (a *MultiValueOutOfService) Value() *MultiValueOutOfService { return a }
func (a MultiValueOutOfService) MarshalZcl() ([]byte, error)     { return zcl.Zbool(a).MarshalZcl() }

func (a *MultiValueOutOfService) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbool)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiValueOutOfService(*nt)
	return br, err
}

func (a MultiValueOutOfService) String() string {
	return zcl.Sprintf("%v", zcl.Zbool(a))
}

// MultiValuePresentValue is an autogenerated attribute in the MultistateValueBasic cluster
type MultiValuePresentValue zcl.Zu16

const MultiValuePresentValueAttr zcl.AttrID = 85

func (MultiValuePresentValue) ID() zcl.AttrID                    { return MultiValuePresentValueAttr }
func (MultiValuePresentValue) Cluster() zcl.ClusterID            { return MultistateValueBasicID }
func (MultiValuePresentValue) Name() string                      { return "Multi Value Present value" }
func (MultiValuePresentValue) Readable() bool                    { return true }
func (MultiValuePresentValue) Writable() bool                    { return true }
func (MultiValuePresentValue) Reportable() bool                  { return true }
func (MultiValuePresentValue) SceneIndex() int                   { return -1 }
func (a *MultiValuePresentValue) Value() *MultiValuePresentValue { return a }
func (a MultiValuePresentValue) MarshalZcl() ([]byte, error)     { return zcl.Zu16(a).MarshalZcl() }

func (a *MultiValuePresentValue) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiValuePresentValue(*nt)
	return br, err
}

func (a MultiValuePresentValue) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

// MultiValuePriorityArray is an autogenerated attribute in the MultistateValueBasic cluster
type MultiValuePriorityArray zcl.Zarray

const MultiValuePriorityArrayAttr zcl.AttrID = 87

func (MultiValuePriorityArray) ID() zcl.AttrID                     { return MultiValuePriorityArrayAttr }
func (MultiValuePriorityArray) Cluster() zcl.ClusterID             { return MultistateValueBasicID }
func (MultiValuePriorityArray) Name() string                       { return "Multi Value Priority Array" }
func (MultiValuePriorityArray) Readable() bool                     { return true }
func (MultiValuePriorityArray) Writable() bool                     { return true }
func (MultiValuePriorityArray) Reportable() bool                   { return false }
func (MultiValuePriorityArray) SceneIndex() int                    { return -1 }
func (a *MultiValuePriorityArray) Value() *MultiValuePriorityArray { return a }
func (a MultiValuePriorityArray) MarshalZcl() ([]byte, error)      { return zcl.Zarray(a).MarshalZcl() }

func (a *MultiValuePriorityArray) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zarray)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiValuePriorityArray(*nt)
	return br, err
}

func (a MultiValuePriorityArray) String() string {
	return zcl.Sprintf("%v", zcl.Zarray(a))
}

// MultiValueReliability is an autogenerated attribute in the MultistateValueBasic cluster
type MultiValueReliability zcl.Zenum8

const MultiValueReliabilityAttr zcl.AttrID = 103

func (MultiValueReliability) ID() zcl.AttrID                   { return MultiValueReliabilityAttr }
func (MultiValueReliability) Cluster() zcl.ClusterID           { return MultistateValueBasicID }
func (MultiValueReliability) Name() string                     { return "Multi Value Reliability" }
func (MultiValueReliability) Readable() bool                   { return true }
func (MultiValueReliability) Writable() bool                   { return true }
func (MultiValueReliability) Reportable() bool                 { return false }
func (MultiValueReliability) SceneIndex() int                  { return -1 }
func (a *MultiValueReliability) Value() *MultiValueReliability { return a }
func (a MultiValueReliability) MarshalZcl() ([]byte, error)    { return zcl.Zenum8(a).MarshalZcl() }

func (a *MultiValueReliability) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zenum8)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiValueReliability(*nt)
	return br, err
}

func (a MultiValueReliability) String() string {
	switch a {
	case 0x00:
		return "No fault detected"
	case 0x01:
		return "No Sensor"
	case 0x02:
		return "Over Range"
	case 0x03:
		return "Under Range"
	case 0x04:
		return "Open Loop"
	case 0x05:
		return "Shorted Loop"
	case 0x06:
		return "No Output"
	case 0x07:
		return "Unreliable (other)"
	case 0x08:
		return "Process Error"
	case 0x09:
		return "Multi state fault"
	case 0x0A:
		return "Configuration Error"
	}
	return zcl.Sprintf("%v", zcl.Zenum8(a))
}

// IsNoFaultDetected checks if MultiValueReliability equals the value for No fault detected (0x00)
func (a MultiValueReliability) IsNoFaultDetected() bool { return a == 0x00 }

// SetNoFaultDetected sets MultiValueReliability to No fault detected (0x00)
func (a *MultiValueReliability) SetNoFaultDetected() { *a = 0x00 }

// IsNoSensor checks if MultiValueReliability equals the value for No Sensor (0x01)
func (a MultiValueReliability) IsNoSensor() bool { return a == 0x01 }

// SetNoSensor sets MultiValueReliability to No Sensor (0x01)
func (a *MultiValueReliability) SetNoSensor() { *a = 0x01 }

// IsOverRange checks if MultiValueReliability equals the value for Over Range (0x02)
func (a MultiValueReliability) IsOverRange() bool { return a == 0x02 }

// SetOverRange sets MultiValueReliability to Over Range (0x02)
func (a *MultiValueReliability) SetOverRange() { *a = 0x02 }

// IsUnderRange checks if MultiValueReliability equals the value for Under Range (0x03)
func (a MultiValueReliability) IsUnderRange() bool { return a == 0x03 }

// SetUnderRange sets MultiValueReliability to Under Range (0x03)
func (a *MultiValueReliability) SetUnderRange() { *a = 0x03 }

// IsOpenLoop checks if MultiValueReliability equals the value for Open Loop (0x04)
func (a MultiValueReliability) IsOpenLoop() bool { return a == 0x04 }

// SetOpenLoop sets MultiValueReliability to Open Loop (0x04)
func (a *MultiValueReliability) SetOpenLoop() { *a = 0x04 }

// IsShortedLoop checks if MultiValueReliability equals the value for Shorted Loop (0x05)
func (a MultiValueReliability) IsShortedLoop() bool { return a == 0x05 }

// SetShortedLoop sets MultiValueReliability to Shorted Loop (0x05)
func (a *MultiValueReliability) SetShortedLoop() { *a = 0x05 }

// IsNoOutput checks if MultiValueReliability equals the value for No Output (0x06)
func (a MultiValueReliability) IsNoOutput() bool { return a == 0x06 }

// SetNoOutput sets MultiValueReliability to No Output (0x06)
func (a *MultiValueReliability) SetNoOutput() { *a = 0x06 }

// IsUnreliableOther checks if MultiValueReliability equals the value for Unreliable (other) (0x07)
func (a MultiValueReliability) IsUnreliableOther() bool { return a == 0x07 }

// SetUnreliableOther sets MultiValueReliability to Unreliable (other) (0x07)
func (a *MultiValueReliability) SetUnreliableOther() { *a = 0x07 }

// IsProcessError checks if MultiValueReliability equals the value for Process Error (0x08)
func (a MultiValueReliability) IsProcessError() bool { return a == 0x08 }

// SetProcessError sets MultiValueReliability to Process Error (0x08)
func (a *MultiValueReliability) SetProcessError() { *a = 0x08 }

// IsMultiStateFault checks if MultiValueReliability equals the value for Multi state fault (0x09)
func (a MultiValueReliability) IsMultiStateFault() bool { return a == 0x09 }

// SetMultiStateFault sets MultiValueReliability to Multi state fault (0x09)
func (a *MultiValueReliability) SetMultiStateFault() { *a = 0x09 }

// IsConfigurationError checks if MultiValueReliability equals the value for Configuration Error (0x0A)
func (a MultiValueReliability) IsConfigurationError() bool { return a == 0x0A }

// SetConfigurationError sets MultiValueReliability to Configuration Error (0x0A)
func (a *MultiValueReliability) SetConfigurationError() { *a = 0x0A }

// MultiValueRelinquishDefault is an autogenerated attribute in the MultistateValueBasic cluster
type MultiValueRelinquishDefault zcl.Zu16

const MultiValueRelinquishDefaultAttr zcl.AttrID = 104

func (MultiValueRelinquishDefault) ID() zcl.AttrID                         { return MultiValueRelinquishDefaultAttr }
func (MultiValueRelinquishDefault) Cluster() zcl.ClusterID                 { return MultistateValueBasicID }
func (MultiValueRelinquishDefault) Name() string                           { return "Multi Value Relinquish Default" }
func (MultiValueRelinquishDefault) Readable() bool                         { return true }
func (MultiValueRelinquishDefault) Writable() bool                         { return true }
func (MultiValueRelinquishDefault) Reportable() bool                       { return false }
func (MultiValueRelinquishDefault) SceneIndex() int                        { return -1 }
func (a *MultiValueRelinquishDefault) Value() *MultiValueRelinquishDefault { return a }
func (a MultiValueRelinquishDefault) MarshalZcl() ([]byte, error)          { return zcl.Zu16(a).MarshalZcl() }

func (a *MultiValueRelinquishDefault) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiValueRelinquishDefault(*nt)
	return br, err
}

func (a MultiValueRelinquishDefault) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

// MultiValueStatusFlags is an autogenerated attribute in the MultistateValueBasic cluster
type MultiValueStatusFlags zcl.Zbmp8

const MultiValueStatusFlagsAttr zcl.AttrID = 111

func (MultiValueStatusFlags) ID() zcl.AttrID                   { return MultiValueStatusFlagsAttr }
func (MultiValueStatusFlags) Cluster() zcl.ClusterID           { return MultistateValueBasicID }
func (MultiValueStatusFlags) Name() string                     { return "Multi Value Status flags" }
func (MultiValueStatusFlags) Readable() bool                   { return true }
func (MultiValueStatusFlags) Writable() bool                   { return false }
func (MultiValueStatusFlags) Reportable() bool                 { return true }
func (MultiValueStatusFlags) SceneIndex() int                  { return -1 }
func (a *MultiValueStatusFlags) Value() *MultiValueStatusFlags { return a }
func (a MultiValueStatusFlags) MarshalZcl() ([]byte, error)    { return zcl.Zbmp8(a).MarshalZcl() }

func (a *MultiValueStatusFlags) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbmp8)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiValueStatusFlags(*nt)
	return br, err
}

func (a MultiValueStatusFlags) String() string {
	var bstr []string
	if a.IsInAlarm() {
		bstr = append(bstr, "In Alarm")
	}
	if a.IsFault() {
		bstr = append(bstr, "Fault")
	}
	if a.IsOveridden() {
		bstr = append(bstr, "Overidden")
	}
	if a.IsOutOfService() {
		bstr = append(bstr, "Out of Service")
	}
	return zcl.StrJoin(bstr, ", ")
}

func (a MultiValueStatusFlags) IsInAlarm() bool {
	return zcl.BitmapTest([]byte(a), 0)
}
func (a *MultiValueStatusFlags) SetInAlarm(b bool) {
	*a = MultiValueStatusFlags(zcl.BitmapSet([]byte(*a), 0, b))
}

func (a MultiValueStatusFlags) IsFault() bool {
	return zcl.BitmapTest([]byte(a), 1)
}
func (a *MultiValueStatusFlags) SetFault(b bool) {
	*a = MultiValueStatusFlags(zcl.BitmapSet([]byte(*a), 1, b))
}

func (a MultiValueStatusFlags) IsOveridden() bool {
	return zcl.BitmapTest([]byte(a), 2)
}
func (a *MultiValueStatusFlags) SetOveridden(b bool) {
	*a = MultiValueStatusFlags(zcl.BitmapSet([]byte(*a), 2, b))
}

func (a MultiValueStatusFlags) IsOutOfService() bool {
	return zcl.BitmapTest([]byte(a), 3)
}
func (a *MultiValueStatusFlags) SetOutOfService(b bool) {
	*a = MultiValueStatusFlags(zcl.BitmapSet([]byte(*a), 3, b))
}

// MultiValueApplicationType is an autogenerated attribute in the MultistateValueBasic cluster
type MultiValueApplicationType zcl.Zu32

const MultiValueApplicationTypeAttr zcl.AttrID = 256

func (MultiValueApplicationType) ID() zcl.AttrID                       { return MultiValueApplicationTypeAttr }
func (MultiValueApplicationType) Cluster() zcl.ClusterID               { return MultistateValueBasicID }
func (MultiValueApplicationType) Name() string                         { return "Multi Value Application Type" }
func (MultiValueApplicationType) Readable() bool                       { return true }
func (MultiValueApplicationType) Writable() bool                       { return false }
func (MultiValueApplicationType) Reportable() bool                     { return false }
func (MultiValueApplicationType) SceneIndex() int                      { return -1 }
func (a *MultiValueApplicationType) Value() *MultiValueApplicationType { return a }
func (a MultiValueApplicationType) MarshalZcl() ([]byte, error)        { return zcl.Zu32(a).MarshalZcl() }

func (a *MultiValueApplicationType) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu32)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiValueApplicationType(*nt)
	return br, err
}

func (a MultiValueApplicationType) String() string {
	return zcl.Sprintf("%v", zcl.Zu32(a))
}

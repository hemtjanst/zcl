// An interface for reading the value of an analog measurement and accessing various characteristics of that measurement.
package general

import (
	"hemtjan.st/zcl"
)

// AnalogInputBasic
const AnalogInputBasicID zcl.ClusterID = 12

var AnalogInputBasicCluster = zcl.Cluster{
	ServerCmd: map[zcl.CommandID]func() zcl.Command{},
	ClientCmd: map[zcl.CommandID]func() zcl.Command{},
	ServerAttr: map[zcl.AttrID]func() zcl.Attr{
		AnalogInputDescriptionAttr:      func() zcl.Attr { return new(AnalogInputDescription) },
		AnalogInputMaxPresentValueAttr:  func() zcl.Attr { return new(AnalogInputMaxPresentValue) },
		AnalogInputMinPresentValueAttr:  func() zcl.Attr { return new(AnalogInputMinPresentValue) },
		AnalogInputOutOfServiceAttr:     func() zcl.Attr { return new(AnalogInputOutOfService) },
		AnalogInputPresentValueAttr:     func() zcl.Attr { return new(AnalogInputPresentValue) },
		AnalogInputReliabilityAttr:      func() zcl.Attr { return new(AnalogInputReliability) },
		AnalogInputResolutionAttr:       func() zcl.Attr { return new(AnalogInputResolution) },
		AnalogInputStatusFlagsAttr:      func() zcl.Attr { return new(AnalogInputStatusFlags) },
		AnalogInputEngineeringUnitsAttr: func() zcl.Attr { return new(AnalogInputEngineeringUnits) },
		AnalogInputApplicationTypeAttr:  func() zcl.Attr { return new(AnalogInputApplicationType) },
	},
	ClientAttr: map[zcl.AttrID]func() zcl.Attr{},
	SceneAttr:  []zcl.AttrID{},
}

// AnalogInputDescription is an autogenerated attribute in the AnalogInputBasic cluster
type AnalogInputDescription zcl.Zcstring

const AnalogInputDescriptionAttr zcl.AttrID = 28

func (AnalogInputDescription) ID() zcl.AttrID                    { return AnalogInputDescriptionAttr }
func (AnalogInputDescription) Cluster() zcl.ClusterID            { return AnalogInputBasicID }
func (AnalogInputDescription) Name() string                      { return "Analog Input Description" }
func (AnalogInputDescription) Readable() bool                    { return true }
func (AnalogInputDescription) Writable() bool                    { return true }
func (AnalogInputDescription) Reportable() bool                  { return false }
func (AnalogInputDescription) SceneIndex() int                   { return -1 }
func (a *AnalogInputDescription) Value() *AnalogInputDescription { return a }
func (a AnalogInputDescription) MarshalZcl() ([]byte, error)     { return zcl.Zcstring(a).MarshalZcl() }

func (a *AnalogInputDescription) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zcstring)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogInputDescription(*nt)
	return br, err
}

func (a AnalogInputDescription) String() string {
	return zcl.Sprintf("%v", zcl.Zcstring(a))
}

// AnalogInputMaxPresentValue is an autogenerated attribute in the AnalogInputBasic cluster
type AnalogInputMaxPresentValue zcl.Zfloat

const AnalogInputMaxPresentValueAttr zcl.AttrID = 65

func (AnalogInputMaxPresentValue) ID() zcl.AttrID                        { return AnalogInputMaxPresentValueAttr }
func (AnalogInputMaxPresentValue) Cluster() zcl.ClusterID                { return AnalogInputBasicID }
func (AnalogInputMaxPresentValue) Name() string                          { return "Analog Input Max Present Value" }
func (AnalogInputMaxPresentValue) Readable() bool                        { return true }
func (AnalogInputMaxPresentValue) Writable() bool                        { return true }
func (AnalogInputMaxPresentValue) Reportable() bool                      { return false }
func (AnalogInputMaxPresentValue) SceneIndex() int                       { return -1 }
func (a *AnalogInputMaxPresentValue) Value() *AnalogInputMaxPresentValue { return a }
func (a AnalogInputMaxPresentValue) MarshalZcl() ([]byte, error)         { return zcl.Zfloat(a).MarshalZcl() }

func (a *AnalogInputMaxPresentValue) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zfloat)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogInputMaxPresentValue(*nt)
	return br, err
}

func (a AnalogInputMaxPresentValue) String() string {
	return zcl.Sprintf("%v", zcl.Zfloat(a))
}

// AnalogInputMinPresentValue is an autogenerated attribute in the AnalogInputBasic cluster
type AnalogInputMinPresentValue zcl.Zfloat

const AnalogInputMinPresentValueAttr zcl.AttrID = 66

func (AnalogInputMinPresentValue) ID() zcl.AttrID                        { return AnalogInputMinPresentValueAttr }
func (AnalogInputMinPresentValue) Cluster() zcl.ClusterID                { return AnalogInputBasicID }
func (AnalogInputMinPresentValue) Name() string                          { return "Analog Input Min Present Value" }
func (AnalogInputMinPresentValue) Readable() bool                        { return true }
func (AnalogInputMinPresentValue) Writable() bool                        { return true }
func (AnalogInputMinPresentValue) Reportable() bool                      { return false }
func (AnalogInputMinPresentValue) SceneIndex() int                       { return -1 }
func (a *AnalogInputMinPresentValue) Value() *AnalogInputMinPresentValue { return a }
func (a AnalogInputMinPresentValue) MarshalZcl() ([]byte, error)         { return zcl.Zfloat(a).MarshalZcl() }

func (a *AnalogInputMinPresentValue) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zfloat)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogInputMinPresentValue(*nt)
	return br, err
}

func (a AnalogInputMinPresentValue) String() string {
	return zcl.Sprintf("%v", zcl.Zfloat(a))
}

// AnalogInputOutOfService is an autogenerated attribute in the AnalogInputBasic cluster
type AnalogInputOutOfService zcl.Zbool

const AnalogInputOutOfServiceAttr zcl.AttrID = 81

func (AnalogInputOutOfService) ID() zcl.AttrID                     { return AnalogInputOutOfServiceAttr }
func (AnalogInputOutOfService) Cluster() zcl.ClusterID             { return AnalogInputBasicID }
func (AnalogInputOutOfService) Name() string                       { return "Analog Input Out of service" }
func (AnalogInputOutOfService) Readable() bool                     { return true }
func (AnalogInputOutOfService) Writable() bool                     { return true }
func (AnalogInputOutOfService) Reportable() bool                   { return false }
func (AnalogInputOutOfService) SceneIndex() int                    { return -1 }
func (a *AnalogInputOutOfService) Value() *AnalogInputOutOfService { return a }
func (a AnalogInputOutOfService) MarshalZcl() ([]byte, error)      { return zcl.Zbool(a).MarshalZcl() }

func (a *AnalogInputOutOfService) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbool)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogInputOutOfService(*nt)
	return br, err
}

func (a AnalogInputOutOfService) String() string {
	return zcl.Sprintf("%v", zcl.Zbool(a))
}

// AnalogInputPresentValue is an autogenerated attribute in the AnalogInputBasic cluster
type AnalogInputPresentValue zcl.Zfloat

const AnalogInputPresentValueAttr zcl.AttrID = 85

func (AnalogInputPresentValue) ID() zcl.AttrID                     { return AnalogInputPresentValueAttr }
func (AnalogInputPresentValue) Cluster() zcl.ClusterID             { return AnalogInputBasicID }
func (AnalogInputPresentValue) Name() string                       { return "Analog Input Present value" }
func (AnalogInputPresentValue) Readable() bool                     { return true }
func (AnalogInputPresentValue) Writable() bool                     { return true }
func (AnalogInputPresentValue) Reportable() bool                   { return true }
func (AnalogInputPresentValue) SceneIndex() int                    { return -1 }
func (a *AnalogInputPresentValue) Value() *AnalogInputPresentValue { return a }
func (a AnalogInputPresentValue) MarshalZcl() ([]byte, error)      { return zcl.Zfloat(a).MarshalZcl() }

func (a *AnalogInputPresentValue) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zfloat)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogInputPresentValue(*nt)
	return br, err
}

func (a AnalogInputPresentValue) String() string {
	return zcl.Sprintf("%v", zcl.Zfloat(a))
}

// AnalogInputReliability is an autogenerated attribute in the AnalogInputBasic cluster
type AnalogInputReliability zcl.Zenum8

const AnalogInputReliabilityAttr zcl.AttrID = 103

func (AnalogInputReliability) ID() zcl.AttrID                    { return AnalogInputReliabilityAttr }
func (AnalogInputReliability) Cluster() zcl.ClusterID            { return AnalogInputBasicID }
func (AnalogInputReliability) Name() string                      { return "Analog Input Reliability" }
func (AnalogInputReliability) Readable() bool                    { return true }
func (AnalogInputReliability) Writable() bool                    { return true }
func (AnalogInputReliability) Reportable() bool                  { return false }
func (AnalogInputReliability) SceneIndex() int                   { return -1 }
func (a *AnalogInputReliability) Value() *AnalogInputReliability { return a }
func (a AnalogInputReliability) MarshalZcl() ([]byte, error)     { return zcl.Zenum8(a).MarshalZcl() }

func (a *AnalogInputReliability) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zenum8)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogInputReliability(*nt)
	return br, err
}

func (a AnalogInputReliability) String() string {
	switch a {
	case 0x00:
		return "No fault detected"
	case 0x01:
		return "No Sensor"
	case 0x02:
		return "Over Range"
	case 0x03:
		return "Under Range"
	case 0x04:
		return "Open Loop"
	case 0x05:
		return "Shorted Loop"
	case 0x06:
		return "No Output"
	case 0x07:
		return "Unreliable (other)"
	case 0x08:
		return "Process Error"
	case 0x09:
		return "Multi state fault"
	case 0x0A:
		return "Configuration Error"
	}
	return zcl.Sprintf("%v", zcl.Zenum8(a))
}

// IsNoFaultDetected checks if AnalogInputReliability equals the value for No fault detected (0x00)
func (a AnalogInputReliability) IsNoFaultDetected() bool { return a == 0x00 }

// SetNoFaultDetected sets AnalogInputReliability to No fault detected (0x00)
func (a *AnalogInputReliability) SetNoFaultDetected() { *a = 0x00 }

// IsNoSensor checks if AnalogInputReliability equals the value for No Sensor (0x01)
func (a AnalogInputReliability) IsNoSensor() bool { return a == 0x01 }

// SetNoSensor sets AnalogInputReliability to No Sensor (0x01)
func (a *AnalogInputReliability) SetNoSensor() { *a = 0x01 }

// IsOverRange checks if AnalogInputReliability equals the value for Over Range (0x02)
func (a AnalogInputReliability) IsOverRange() bool { return a == 0x02 }

// SetOverRange sets AnalogInputReliability to Over Range (0x02)
func (a *AnalogInputReliability) SetOverRange() { *a = 0x02 }

// IsUnderRange checks if AnalogInputReliability equals the value for Under Range (0x03)
func (a AnalogInputReliability) IsUnderRange() bool { return a == 0x03 }

// SetUnderRange sets AnalogInputReliability to Under Range (0x03)
func (a *AnalogInputReliability) SetUnderRange() { *a = 0x03 }

// IsOpenLoop checks if AnalogInputReliability equals the value for Open Loop (0x04)
func (a AnalogInputReliability) IsOpenLoop() bool { return a == 0x04 }

// SetOpenLoop sets AnalogInputReliability to Open Loop (0x04)
func (a *AnalogInputReliability) SetOpenLoop() { *a = 0x04 }

// IsShortedLoop checks if AnalogInputReliability equals the value for Shorted Loop (0x05)
func (a AnalogInputReliability) IsShortedLoop() bool { return a == 0x05 }

// SetShortedLoop sets AnalogInputReliability to Shorted Loop (0x05)
func (a *AnalogInputReliability) SetShortedLoop() { *a = 0x05 }

// IsNoOutput checks if AnalogInputReliability equals the value for No Output (0x06)
func (a AnalogInputReliability) IsNoOutput() bool { return a == 0x06 }

// SetNoOutput sets AnalogInputReliability to No Output (0x06)
func (a *AnalogInputReliability) SetNoOutput() { *a = 0x06 }

// IsUnreliableOther checks if AnalogInputReliability equals the value for Unreliable (other) (0x07)
func (a AnalogInputReliability) IsUnreliableOther() bool { return a == 0x07 }

// SetUnreliableOther sets AnalogInputReliability to Unreliable (other) (0x07)
func (a *AnalogInputReliability) SetUnreliableOther() { *a = 0x07 }

// IsProcessError checks if AnalogInputReliability equals the value for Process Error (0x08)
func (a AnalogInputReliability) IsProcessError() bool { return a == 0x08 }

// SetProcessError sets AnalogInputReliability to Process Error (0x08)
func (a *AnalogInputReliability) SetProcessError() { *a = 0x08 }

// IsMultiStateFault checks if AnalogInputReliability equals the value for Multi state fault (0x09)
func (a AnalogInputReliability) IsMultiStateFault() bool { return a == 0x09 }

// SetMultiStateFault sets AnalogInputReliability to Multi state fault (0x09)
func (a *AnalogInputReliability) SetMultiStateFault() { *a = 0x09 }

// IsConfigurationError checks if AnalogInputReliability equals the value for Configuration Error (0x0A)
func (a AnalogInputReliability) IsConfigurationError() bool { return a == 0x0A }

// SetConfigurationError sets AnalogInputReliability to Configuration Error (0x0A)
func (a *AnalogInputReliability) SetConfigurationError() { *a = 0x0A }

// AnalogInputResolution is an autogenerated attribute in the AnalogInputBasic cluster
type AnalogInputResolution zcl.Zfloat

const AnalogInputResolutionAttr zcl.AttrID = 106

func (AnalogInputResolution) ID() zcl.AttrID                   { return AnalogInputResolutionAttr }
func (AnalogInputResolution) Cluster() zcl.ClusterID           { return AnalogInputBasicID }
func (AnalogInputResolution) Name() string                     { return "Analog Input Resolution" }
func (AnalogInputResolution) Readable() bool                   { return true }
func (AnalogInputResolution) Writable() bool                   { return true }
func (AnalogInputResolution) Reportable() bool                 { return false }
func (AnalogInputResolution) SceneIndex() int                  { return -1 }
func (a *AnalogInputResolution) Value() *AnalogInputResolution { return a }
func (a AnalogInputResolution) MarshalZcl() ([]byte, error)    { return zcl.Zfloat(a).MarshalZcl() }

func (a *AnalogInputResolution) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zfloat)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogInputResolution(*nt)
	return br, err
}

func (a AnalogInputResolution) String() string {
	return zcl.Sprintf("%v", zcl.Zfloat(a))
}

// AnalogInputStatusFlags is an autogenerated attribute in the AnalogInputBasic cluster
type AnalogInputStatusFlags zcl.Zbmp8

const AnalogInputStatusFlagsAttr zcl.AttrID = 111

func (AnalogInputStatusFlags) ID() zcl.AttrID                    { return AnalogInputStatusFlagsAttr }
func (AnalogInputStatusFlags) Cluster() zcl.ClusterID            { return AnalogInputBasicID }
func (AnalogInputStatusFlags) Name() string                      { return "Analog Input Status flags" }
func (AnalogInputStatusFlags) Readable() bool                    { return true }
func (AnalogInputStatusFlags) Writable() bool                    { return false }
func (AnalogInputStatusFlags) Reportable() bool                  { return true }
func (AnalogInputStatusFlags) SceneIndex() int                   { return -1 }
func (a *AnalogInputStatusFlags) Value() *AnalogInputStatusFlags { return a }
func (a AnalogInputStatusFlags) MarshalZcl() ([]byte, error)     { return zcl.Zbmp8(a).MarshalZcl() }

func (a *AnalogInputStatusFlags) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbmp8)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogInputStatusFlags(*nt)
	return br, err
}

func (a AnalogInputStatusFlags) String() string {
	var bstr []string
	if a.IsInAlarm() {
		bstr = append(bstr, "In Alarm")
	}
	if a.IsFault() {
		bstr = append(bstr, "Fault")
	}
	if a.IsOveridden() {
		bstr = append(bstr, "Overidden")
	}
	if a.IsOutOfService() {
		bstr = append(bstr, "Out of Service")
	}
	return zcl.StrJoin(bstr, ", ")
}

func (a AnalogInputStatusFlags) IsInAlarm() bool {
	return zcl.BitmapTest([]byte(a), 0)
}
func (a *AnalogInputStatusFlags) SetInAlarm(b bool) {
	*a = AnalogInputStatusFlags(zcl.BitmapSet([]byte(*a), 0, b))
}

func (a AnalogInputStatusFlags) IsFault() bool {
	return zcl.BitmapTest([]byte(a), 1)
}
func (a *AnalogInputStatusFlags) SetFault(b bool) {
	*a = AnalogInputStatusFlags(zcl.BitmapSet([]byte(*a), 1, b))
}

func (a AnalogInputStatusFlags) IsOveridden() bool {
	return zcl.BitmapTest([]byte(a), 2)
}
func (a *AnalogInputStatusFlags) SetOveridden(b bool) {
	*a = AnalogInputStatusFlags(zcl.BitmapSet([]byte(*a), 2, b))
}

func (a AnalogInputStatusFlags) IsOutOfService() bool {
	return zcl.BitmapTest([]byte(a), 3)
}
func (a *AnalogInputStatusFlags) SetOutOfService(b bool) {
	*a = AnalogInputStatusFlags(zcl.BitmapSet([]byte(*a), 3, b))
}

// AnalogInputEngineeringUnits is an autogenerated attribute in the AnalogInputBasic cluster
type AnalogInputEngineeringUnits zcl.EngineeringUnit

const AnalogInputEngineeringUnitsAttr zcl.AttrID = 117

func (AnalogInputEngineeringUnits) ID() zcl.AttrID                         { return AnalogInputEngineeringUnitsAttr }
func (AnalogInputEngineeringUnits) Cluster() zcl.ClusterID                 { return AnalogInputBasicID }
func (AnalogInputEngineeringUnits) Name() string                           { return "Analog Input Engineering Units" }
func (AnalogInputEngineeringUnits) Readable() bool                         { return true }
func (AnalogInputEngineeringUnits) Writable() bool                         { return true }
func (AnalogInputEngineeringUnits) Reportable() bool                       { return false }
func (AnalogInputEngineeringUnits) SceneIndex() int                        { return -1 }
func (a *AnalogInputEngineeringUnits) Value() *AnalogInputEngineeringUnits { return a }
func (a AnalogInputEngineeringUnits) MarshalZcl() ([]byte, error) {
	return zcl.EngineeringUnit(a).MarshalZcl()
}

func (a *AnalogInputEngineeringUnits) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.EngineeringUnit)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogInputEngineeringUnits(*nt)
	return br, err
}

func (a AnalogInputEngineeringUnits) String() string {
	return zcl.Sprintf("%v", zcl.EngineeringUnit(a))
}

// AnalogInputApplicationType is an autogenerated attribute in the AnalogInputBasic cluster
type AnalogInputApplicationType zcl.Zu32

const AnalogInputApplicationTypeAttr zcl.AttrID = 256

func (AnalogInputApplicationType) ID() zcl.AttrID                        { return AnalogInputApplicationTypeAttr }
func (AnalogInputApplicationType) Cluster() zcl.ClusterID                { return AnalogInputBasicID }
func (AnalogInputApplicationType) Name() string                          { return "Analog Input Application Type" }
func (AnalogInputApplicationType) Readable() bool                        { return true }
func (AnalogInputApplicationType) Writable() bool                        { return false }
func (AnalogInputApplicationType) Reportable() bool                      { return false }
func (AnalogInputApplicationType) SceneIndex() int                       { return -1 }
func (a *AnalogInputApplicationType) Value() *AnalogInputApplicationType { return a }
func (a AnalogInputApplicationType) MarshalZcl() ([]byte, error)         { return zcl.Zu32(a).MarshalZcl() }

func (a *AnalogInputApplicationType) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu32)
	br, err := nt.UnmarshalZcl(b)
	*a = AnalogInputApplicationType(*nt)
	return br, err
}

func (a AnalogInputApplicationType) String() string {
	return zcl.Sprintf("%v", zcl.Zu32(a))
}

// Provides an interface for reading the value of a multistate measurement
// and accessing various characteristics of that measurement. The cluster is typically
// used to implement a sensor that measures a physical quantity that can take on
// one of a number of discrete states.
package general

import (
	"neotor.se/zcl"
)

// MultistateInputBasic
const MultistateInputBasicID zcl.ClusterID = 18

var MultistateInputBasicCluster = zcl.Cluster{
	ServerCmd: map[zcl.CommandID]func() zcl.Command{},
	ClientCmd: map[zcl.CommandID]func() zcl.Command{},
	ServerAttr: map[zcl.AttrID]func() zcl.Attr{
		MultiInputStateTextAttr:       func() zcl.Attr { return new(MultiInputStateText) },
		MultiInputDescriptionAttr:     func() zcl.Attr { return new(MultiInputDescription) },
		MultiInputNumberOfStatesAttr:  func() zcl.Attr { return new(MultiInputNumberOfStates) },
		MultiInputOutOfServiceAttr:    func() zcl.Attr { return new(MultiInputOutOfService) },
		MultiInputPresentValueAttr:    func() zcl.Attr { return new(MultiInputPresentValue) },
		MultiInputReliabilityAttr:     func() zcl.Attr { return new(MultiInputReliability) },
		MultiInputStatusFlagsAttr:     func() zcl.Attr { return new(MultiInputStatusFlags) },
		MultiInputApplicationTypeAttr: func() zcl.Attr { return new(MultiInputApplicationType) },
	},
	ClientAttr: map[zcl.AttrID]func() zcl.Attr{},
	SceneAttr:  []zcl.AttrID{},
}

// MultiInputStateText is an autogenerated attribute in the MultistateInputBasic cluster
type MultiInputStateText zcl.Zcstring

const MultiInputStateTextAttr zcl.AttrID = 14

func (MultiInputStateText) ID() zcl.AttrID                 { return MultiInputStateTextAttr }
func (MultiInputStateText) Cluster() zcl.ClusterID         { return MultistateInputBasicID }
func (MultiInputStateText) Name() string                   { return "Multi Input State Text" }
func (MultiInputStateText) Readable() bool                 { return true }
func (MultiInputStateText) Writable() bool                 { return true }
func (MultiInputStateText) Reportable() bool               { return false }
func (MultiInputStateText) SceneIndex() int                { return -1 }
func (a *MultiInputStateText) Value() *MultiInputStateText { return a }
func (a MultiInputStateText) MarshalZcl() ([]byte, error)  { return zcl.Zcstring(a).MarshalZcl() }

func (a *MultiInputStateText) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zcstring)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiInputStateText(*nt)
	return br, err
}

func (a MultiInputStateText) String() string {
	return zcl.Sprintf("%v", zcl.Zcstring(a))
}

// MultiInputDescription is an autogenerated attribute in the MultistateInputBasic cluster
type MultiInputDescription zcl.Zcstring

const MultiInputDescriptionAttr zcl.AttrID = 28

func (MultiInputDescription) ID() zcl.AttrID                   { return MultiInputDescriptionAttr }
func (MultiInputDescription) Cluster() zcl.ClusterID           { return MultistateInputBasicID }
func (MultiInputDescription) Name() string                     { return "Multi Input Description" }
func (MultiInputDescription) Readable() bool                   { return true }
func (MultiInputDescription) Writable() bool                   { return true }
func (MultiInputDescription) Reportable() bool                 { return false }
func (MultiInputDescription) SceneIndex() int                  { return -1 }
func (a *MultiInputDescription) Value() *MultiInputDescription { return a }
func (a MultiInputDescription) MarshalZcl() ([]byte, error)    { return zcl.Zcstring(a).MarshalZcl() }

func (a *MultiInputDescription) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zcstring)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiInputDescription(*nt)
	return br, err
}

func (a MultiInputDescription) String() string {
	return zcl.Sprintf("%v", zcl.Zcstring(a))
}

// MultiInputNumberOfStates is an autogenerated attribute in the MultistateInputBasic cluster
type MultiInputNumberOfStates zcl.Zu16

const MultiInputNumberOfStatesAttr zcl.AttrID = 74

func (MultiInputNumberOfStates) ID() zcl.AttrID                      { return MultiInputNumberOfStatesAttr }
func (MultiInputNumberOfStates) Cluster() zcl.ClusterID              { return MultistateInputBasicID }
func (MultiInputNumberOfStates) Name() string                        { return "Multi Input Number of states" }
func (MultiInputNumberOfStates) Readable() bool                      { return true }
func (MultiInputNumberOfStates) Writable() bool                      { return true }
func (MultiInputNumberOfStates) Reportable() bool                    { return false }
func (MultiInputNumberOfStates) SceneIndex() int                     { return -1 }
func (a *MultiInputNumberOfStates) Value() *MultiInputNumberOfStates { return a }
func (a MultiInputNumberOfStates) MarshalZcl() ([]byte, error)       { return zcl.Zu16(a).MarshalZcl() }

func (a *MultiInputNumberOfStates) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiInputNumberOfStates(*nt)
	return br, err
}

func (a MultiInputNumberOfStates) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

// MultiInputOutOfService is an autogenerated attribute in the MultistateInputBasic cluster
type MultiInputOutOfService zcl.Zbool

const MultiInputOutOfServiceAttr zcl.AttrID = 81

func (MultiInputOutOfService) ID() zcl.AttrID                    { return MultiInputOutOfServiceAttr }
func (MultiInputOutOfService) Cluster() zcl.ClusterID            { return MultistateInputBasicID }
func (MultiInputOutOfService) Name() string                      { return "Multi Input Out of service" }
func (MultiInputOutOfService) Readable() bool                    { return true }
func (MultiInputOutOfService) Writable() bool                    { return true }
func (MultiInputOutOfService) Reportable() bool                  { return false }
func (MultiInputOutOfService) SceneIndex() int                   { return -1 }
func (a *MultiInputOutOfService) Value() *MultiInputOutOfService { return a }
func (a MultiInputOutOfService) MarshalZcl() ([]byte, error)     { return zcl.Zbool(a).MarshalZcl() }

func (a *MultiInputOutOfService) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbool)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiInputOutOfService(*nt)
	return br, err
}

func (a MultiInputOutOfService) String() string {
	return zcl.Sprintf("%v", zcl.Zbool(a))
}

// MultiInputPresentValue is an autogenerated attribute in the MultistateInputBasic cluster
type MultiInputPresentValue zcl.Zu16

const MultiInputPresentValueAttr zcl.AttrID = 85

func (MultiInputPresentValue) ID() zcl.AttrID                    { return MultiInputPresentValueAttr }
func (MultiInputPresentValue) Cluster() zcl.ClusterID            { return MultistateInputBasicID }
func (MultiInputPresentValue) Name() string                      { return "Multi Input Present value" }
func (MultiInputPresentValue) Readable() bool                    { return true }
func (MultiInputPresentValue) Writable() bool                    { return true }
func (MultiInputPresentValue) Reportable() bool                  { return true }
func (MultiInputPresentValue) SceneIndex() int                   { return -1 }
func (a *MultiInputPresentValue) Value() *MultiInputPresentValue { return a }
func (a MultiInputPresentValue) MarshalZcl() ([]byte, error)     { return zcl.Zu16(a).MarshalZcl() }

func (a *MultiInputPresentValue) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiInputPresentValue(*nt)
	return br, err
}

func (a MultiInputPresentValue) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

// MultiInputReliability is an autogenerated attribute in the MultistateInputBasic cluster
type MultiInputReliability zcl.Zenum8

const MultiInputReliabilityAttr zcl.AttrID = 103

func (MultiInputReliability) ID() zcl.AttrID                   { return MultiInputReliabilityAttr }
func (MultiInputReliability) Cluster() zcl.ClusterID           { return MultistateInputBasicID }
func (MultiInputReliability) Name() string                     { return "Multi Input Reliability" }
func (MultiInputReliability) Readable() bool                   { return true }
func (MultiInputReliability) Writable() bool                   { return true }
func (MultiInputReliability) Reportable() bool                 { return false }
func (MultiInputReliability) SceneIndex() int                  { return -1 }
func (a *MultiInputReliability) Value() *MultiInputReliability { return a }
func (a MultiInputReliability) MarshalZcl() ([]byte, error)    { return zcl.Zenum8(a).MarshalZcl() }

func (a *MultiInputReliability) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zenum8)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiInputReliability(*nt)
	return br, err
}

func (a MultiInputReliability) String() string {
	switch a {
	case 0x00:
		return "No fault detected"
	case 0x01:
		return "No Sensor"
	case 0x02:
		return "Over Range"
	case 0x03:
		return "Under Range"
	case 0x04:
		return "Open Loop"
	case 0x05:
		return "Shorted Loop"
	case 0x06:
		return "No Output"
	case 0x07:
		return "Unreliable (other)"
	case 0x08:
		return "Process Error"
	case 0x09:
		return "Multi state fault"
	case 0x0A:
		return "Configuration Error"
	}
	return zcl.Sprintf("%v", zcl.Zenum8(a))
}

// IsNoFaultDetected checks if MultiInputReliability equals the value for No fault detected (0x00)
func (a MultiInputReliability) IsNoFaultDetected() bool { return a == 0x00 }

// SetNoFaultDetected sets MultiInputReliability to No fault detected (0x00)
func (a *MultiInputReliability) SetNoFaultDetected() { *a = 0x00 }

// IsNoSensor checks if MultiInputReliability equals the value for No Sensor (0x01)
func (a MultiInputReliability) IsNoSensor() bool { return a == 0x01 }

// SetNoSensor sets MultiInputReliability to No Sensor (0x01)
func (a *MultiInputReliability) SetNoSensor() { *a = 0x01 }

// IsOverRange checks if MultiInputReliability equals the value for Over Range (0x02)
func (a MultiInputReliability) IsOverRange() bool { return a == 0x02 }

// SetOverRange sets MultiInputReliability to Over Range (0x02)
func (a *MultiInputReliability) SetOverRange() { *a = 0x02 }

// IsUnderRange checks if MultiInputReliability equals the value for Under Range (0x03)
func (a MultiInputReliability) IsUnderRange() bool { return a == 0x03 }

// SetUnderRange sets MultiInputReliability to Under Range (0x03)
func (a *MultiInputReliability) SetUnderRange() { *a = 0x03 }

// IsOpenLoop checks if MultiInputReliability equals the value for Open Loop (0x04)
func (a MultiInputReliability) IsOpenLoop() bool { return a == 0x04 }

// SetOpenLoop sets MultiInputReliability to Open Loop (0x04)
func (a *MultiInputReliability) SetOpenLoop() { *a = 0x04 }

// IsShortedLoop checks if MultiInputReliability equals the value for Shorted Loop (0x05)
func (a MultiInputReliability) IsShortedLoop() bool { return a == 0x05 }

// SetShortedLoop sets MultiInputReliability to Shorted Loop (0x05)
func (a *MultiInputReliability) SetShortedLoop() { *a = 0x05 }

// IsNoOutput checks if MultiInputReliability equals the value for No Output (0x06)
func (a MultiInputReliability) IsNoOutput() bool { return a == 0x06 }

// SetNoOutput sets MultiInputReliability to No Output (0x06)
func (a *MultiInputReliability) SetNoOutput() { *a = 0x06 }

// IsUnreliableOther checks if MultiInputReliability equals the value for Unreliable (other) (0x07)
func (a MultiInputReliability) IsUnreliableOther() bool { return a == 0x07 }

// SetUnreliableOther sets MultiInputReliability to Unreliable (other) (0x07)
func (a *MultiInputReliability) SetUnreliableOther() { *a = 0x07 }

// IsProcessError checks if MultiInputReliability equals the value for Process Error (0x08)
func (a MultiInputReliability) IsProcessError() bool { return a == 0x08 }

// SetProcessError sets MultiInputReliability to Process Error (0x08)
func (a *MultiInputReliability) SetProcessError() { *a = 0x08 }

// IsMultiStateFault checks if MultiInputReliability equals the value for Multi state fault (0x09)
func (a MultiInputReliability) IsMultiStateFault() bool { return a == 0x09 }

// SetMultiStateFault sets MultiInputReliability to Multi state fault (0x09)
func (a *MultiInputReliability) SetMultiStateFault() { *a = 0x09 }

// IsConfigurationError checks if MultiInputReliability equals the value for Configuration Error (0x0A)
func (a MultiInputReliability) IsConfigurationError() bool { return a == 0x0A }

// SetConfigurationError sets MultiInputReliability to Configuration Error (0x0A)
func (a *MultiInputReliability) SetConfigurationError() { *a = 0x0A }

// MultiInputStatusFlags is an autogenerated attribute in the MultistateInputBasic cluster
type MultiInputStatusFlags zcl.Zbmp8

const MultiInputStatusFlagsAttr zcl.AttrID = 111

func (MultiInputStatusFlags) ID() zcl.AttrID                   { return MultiInputStatusFlagsAttr }
func (MultiInputStatusFlags) Cluster() zcl.ClusterID           { return MultistateInputBasicID }
func (MultiInputStatusFlags) Name() string                     { return "Multi Input Status flags" }
func (MultiInputStatusFlags) Readable() bool                   { return true }
func (MultiInputStatusFlags) Writable() bool                   { return false }
func (MultiInputStatusFlags) Reportable() bool                 { return true }
func (MultiInputStatusFlags) SceneIndex() int                  { return -1 }
func (a *MultiInputStatusFlags) Value() *MultiInputStatusFlags { return a }
func (a MultiInputStatusFlags) MarshalZcl() ([]byte, error)    { return zcl.Zbmp8(a).MarshalZcl() }

func (a *MultiInputStatusFlags) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbmp8)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiInputStatusFlags(*nt)
	return br, err
}

func (a MultiInputStatusFlags) String() string {
	var bstr []string
	if a.IsInAlarm() {
		bstr = append(bstr, "In Alarm")
	}
	if a.IsFault() {
		bstr = append(bstr, "Fault")
	}
	if a.IsOveridden() {
		bstr = append(bstr, "Overidden")
	}
	if a.IsOutOfService() {
		bstr = append(bstr, "Out of Service")
	}
	return zcl.StrJoin(bstr, ", ")
}

func (a MultiInputStatusFlags) IsInAlarm() bool {
	return zcl.BitmapTest([]byte(a), 0)
}
func (a *MultiInputStatusFlags) SetInAlarm(b bool) {
	*a = MultiInputStatusFlags(zcl.BitmapSet([]byte(*a), 0, b))
}

func (a MultiInputStatusFlags) IsFault() bool {
	return zcl.BitmapTest([]byte(a), 1)
}
func (a *MultiInputStatusFlags) SetFault(b bool) {
	*a = MultiInputStatusFlags(zcl.BitmapSet([]byte(*a), 1, b))
}

func (a MultiInputStatusFlags) IsOveridden() bool {
	return zcl.BitmapTest([]byte(a), 2)
}
func (a *MultiInputStatusFlags) SetOveridden(b bool) {
	*a = MultiInputStatusFlags(zcl.BitmapSet([]byte(*a), 2, b))
}

func (a MultiInputStatusFlags) IsOutOfService() bool {
	return zcl.BitmapTest([]byte(a), 3)
}
func (a *MultiInputStatusFlags) SetOutOfService(b bool) {
	*a = MultiInputStatusFlags(zcl.BitmapSet([]byte(*a), 3, b))
}

// MultiInputApplicationType is an autogenerated attribute in the MultistateInputBasic cluster
type MultiInputApplicationType zcl.Zu32

const MultiInputApplicationTypeAttr zcl.AttrID = 256

func (MultiInputApplicationType) ID() zcl.AttrID                       { return MultiInputApplicationTypeAttr }
func (MultiInputApplicationType) Cluster() zcl.ClusterID               { return MultistateInputBasicID }
func (MultiInputApplicationType) Name() string                         { return "Multi Input Application Type" }
func (MultiInputApplicationType) Readable() bool                       { return true }
func (MultiInputApplicationType) Writable() bool                       { return false }
func (MultiInputApplicationType) Reportable() bool                     { return false }
func (MultiInputApplicationType) SceneIndex() int                      { return -1 }
func (a *MultiInputApplicationType) Value() *MultiInputApplicationType { return a }
func (a MultiInputApplicationType) MarshalZcl() ([]byte, error)        { return zcl.Zu32(a).MarshalZcl() }

func (a *MultiInputApplicationType) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu32)
	br, err := nt.UnmarshalZcl(b)
	*a = MultiInputApplicationType(*nt)
	return br, err
}

func (a MultiInputApplicationType) String() string {
	return zcl.Sprintf("%v", zcl.Zu32(a))
}

// Attributes and commands for setting devices light color. The color is specified in the RGB range from 0 - 255.
package other

import (
	"hemtjan.st/zcl"
)

// RgbColor
const RgbColorID zcl.ClusterID = 56838

var RgbColorCluster = zcl.Cluster{
	ServerCmd: map[zcl.CommandID]func() zcl.Command{
		SetColorCommand: func() zcl.Command { return new(SetColor) },
	},
	ClientCmd: map[zcl.CommandID]func() zcl.Command{},
	ServerAttr: map[zcl.AttrID]func() zcl.Attr{
		CurrentcolorsetAttr: func() zcl.Attr { return new(Currentcolorset) },
		ColorsetcountAttr:   func() zcl.Attr { return new(Colorsetcount) },
	},
	ClientAttr: map[zcl.AttrID]func() zcl.Attr{},
	SceneAttr:  []zcl.AttrID{},
}

// On receipt of this command, the color of the light shall be changed and the current index updatet.
type SetColor struct {
	Red      zcl.Zu8
	Green    zcl.Zu8
	Blue     zcl.Zu8
	SetIndex zcl.Zu8
	Options  zcl.Zbmp8
}

const SetColorCommand zcl.CommandID = 0

func (v *SetColor) Values() []zcl.Val {
	return []zcl.Val{
		&v.Red,
		&v.Green,
		&v.Blue,
		&v.SetIndex,
		&v.Options,
	}
}

func (v SetColor) ID() zcl.CommandID {
	return SetColorCommand
}

func (v SetColor) Cluster() zcl.ClusterID {
	return RgbColorID
}

func (v SetColor) MnfCode() []byte {
	return []byte{}
}

func (v SetColor) MarshalZcl() ([]byte, error) {
	var data []byte
	var tmp []byte
	var err error

	if tmp, err = v.Red.MarshalZcl(); err != nil {
		return nil, err
	}
	data = append(data, tmp...)

	if tmp, err = v.Green.MarshalZcl(); err != nil {
		return nil, err
	}
	data = append(data, tmp...)

	if tmp, err = v.Blue.MarshalZcl(); err != nil {
		return nil, err
	}
	data = append(data, tmp...)

	if tmp, err = v.SetIndex.MarshalZcl(); err != nil {
		return nil, err
	}
	data = append(data, tmp...)

	if tmp, err = v.Options.MarshalZcl(); err != nil {
		return nil, err
	}
	data = append(data, tmp...)

	return data, nil
}

func (v *SetColor) UnmarshalZcl(b []byte) ([]byte, error) {
	var err error

	if b, err = (&v.Red).UnmarshalZcl(b); err != nil {
		return b, err
	}

	if b, err = (&v.Green).UnmarshalZcl(b); err != nil {
		return b, err
	}

	if b, err = (&v.Blue).UnmarshalZcl(b); err != nil {
		return b, err
	}

	if b, err = (&v.SetIndex).UnmarshalZcl(b); err != nil {
		return b, err
	}

	if b, err = (&v.Options).UnmarshalZcl(b); err != nil {
		return b, err
	}

	return b, nil
}

func (v SetColor) RedString() string {
	return zcl.Sprintf("%v", zcl.Zu8(v.Red))
}
func (v SetColor) GreenString() string {
	return zcl.Sprintf("%v", zcl.Zu8(v.Green))
}
func (v SetColor) BlueString() string {
	return zcl.Sprintf("%v", zcl.Zu8(v.Blue))
}
func (v SetColor) SetIndexString() string {
	return zcl.Sprintf("%v", zcl.Zu8(v.SetIndex))
}
func (v SetColor) OptionsString() string {
	var bstr []string
	if zcl.BitmapTest([]byte(v.Options), 0) {
		bstr = append(bstr, "Change colors")
	}
	if zcl.BitmapTest([]byte(v.Options), 1) {
		bstr = append(bstr, "Use current preset")
	}
	return zcl.StrJoin(bstr, ", ")
}

func (v SetColor) String() string {
	var str []string
	str = append(str, "Red["+v.RedString()+"]")
	str = append(str, "Green["+v.GreenString()+"]")
	str = append(str, "Blue["+v.BlueString()+"]")
	str = append(str, "SetIndex["+v.SetIndexString()+"]")
	str = append(str, "Options["+v.OptionsString()+"]")
	return "SetColor{" + zcl.StrJoin(str, " ") + "}"
}

func (SetColor) Name() string { return "Set Color" }

// Currentcolorset is an autogenerated attribute in the RgbColor cluster
type Currentcolorset zcl.Zu32

const CurrentcolorsetAttr zcl.AttrID = 0

func (Currentcolorset) ID() zcl.AttrID                { return CurrentcolorsetAttr }
func (Currentcolorset) Cluster() zcl.ClusterID        { return RgbColorID }
func (Currentcolorset) Name() string                  { return "CurrentColorSet" }
func (Currentcolorset) Readable() bool                { return true }
func (Currentcolorset) Writable() bool                { return false }
func (Currentcolorset) Reportable() bool              { return false }
func (Currentcolorset) SceneIndex() int               { return -1 }
func (a *Currentcolorset) Value() *Currentcolorset    { return a }
func (a Currentcolorset) MarshalZcl() ([]byte, error) { return zcl.Zu32(a).MarshalZcl() }

func (a *Currentcolorset) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu32)
	br, err := nt.UnmarshalZcl(b)
	*a = Currentcolorset(*nt)
	return br, err
}

func (a Currentcolorset) String() string {
	return zcl.Sprintf("%v", zcl.Zu32(a))
}

// Colorsetcount is an autogenerated attribute in the RgbColor cluster
type Colorsetcount zcl.Zu8

const ColorsetcountAttr zcl.AttrID = 1

func (Colorsetcount) ID() zcl.AttrID                { return ColorsetcountAttr }
func (Colorsetcount) Cluster() zcl.ClusterID        { return RgbColorID }
func (Colorsetcount) Name() string                  { return "ColorSetCount" }
func (Colorsetcount) Readable() bool                { return true }
func (Colorsetcount) Writable() bool                { return false }
func (Colorsetcount) Reportable() bool              { return false }
func (Colorsetcount) SceneIndex() int               { return -1 }
func (a *Colorsetcount) Value() *Colorsetcount      { return a }
func (a Colorsetcount) MarshalZcl() ([]byte, error) { return zcl.Zu8(a).MarshalZcl() }

func (a *Colorsetcount) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu8)
	br, err := nt.UnmarshalZcl(b)
	*a = Colorsetcount(*nt)
	return br, err
}

func (a Colorsetcount) String() string {
	return zcl.Sprintf("%v", zcl.Zu8(a))
}

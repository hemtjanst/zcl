// The server cluster provides an interface to illuminance measurement functionality, including configuration and provision of notifications of illuminance measurements.
package measurement_and_sensing

import (
	"neotor.se/zcl"
)

// IlluminanceMeasurement
const IlluminanceMeasurementID zcl.ClusterID = 1024

var IlluminanceMeasurementCluster = zcl.Cluster{
	ServerCmd: map[zcl.CommandID]func() zcl.Command{},
	ClientCmd: map[zcl.CommandID]func() zcl.Command{},
	ServerAttr: map[zcl.AttrID]func() zcl.Attr{
		MeasuredIlluminanceAttr:    func() zcl.Attr { return new(MeasuredIlluminance) },
		MinMeasuredIlluminanceAttr: func() zcl.Attr { return new(MinMeasuredIlluminance) },
		MaxMeasuredIlluminanceAttr: func() zcl.Attr { return new(MaxMeasuredIlluminance) },
		IlluminanceToleranceAttr:   func() zcl.Attr { return new(IlluminanceTolerance) },
		LightSensorTypeAttr:        func() zcl.Attr { return new(LightSensorType) },
	},
	ClientAttr: map[zcl.AttrID]func() zcl.Attr{
		HysteresisAttr:   func() zcl.Attr { return new(Hysteresis) },
		MaxUpSpeedAttr:   func() zcl.Attr { return new(MaxUpSpeed) },
		MaxDownSpeedAttr: func() zcl.Attr { return new(MaxDownSpeed) },
		TargetValueAttr:  func() zcl.Attr { return new(TargetValue) },
		StartupTypeAttr:  func() zcl.Attr { return new(StartupType) },
	},
	SceneAttr: []zcl.AttrID{},
}

// MeasuredIlluminance is an autogenerated attribute in the IlluminanceMeasurement cluster
type MeasuredIlluminance zcl.Zu16

const MeasuredIlluminanceAttr zcl.AttrID = 0

func (MeasuredIlluminance) ID() zcl.AttrID                 { return MeasuredIlluminanceAttr }
func (MeasuredIlluminance) Cluster() zcl.ClusterID         { return IlluminanceMeasurementID }
func (MeasuredIlluminance) Name() string                   { return "Measured Illuminance" }
func (MeasuredIlluminance) Readable() bool                 { return true }
func (MeasuredIlluminance) Writable() bool                 { return false }
func (MeasuredIlluminance) Reportable() bool               { return false }
func (MeasuredIlluminance) SceneIndex() int                { return -1 }
func (a *MeasuredIlluminance) Value() *MeasuredIlluminance { return a }
func (a MeasuredIlluminance) MarshalZcl() ([]byte, error)  { return zcl.Zu16(a).MarshalZcl() }

func (a *MeasuredIlluminance) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = MeasuredIlluminance(*nt)
	return br, err
}

func (a MeasuredIlluminance) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

// MinMeasuredIlluminance is an autogenerated attribute in the IlluminanceMeasurement cluster
type MinMeasuredIlluminance zcl.Zu16

const MinMeasuredIlluminanceAttr zcl.AttrID = 1

func (MinMeasuredIlluminance) ID() zcl.AttrID                    { return MinMeasuredIlluminanceAttr }
func (MinMeasuredIlluminance) Cluster() zcl.ClusterID            { return IlluminanceMeasurementID }
func (MinMeasuredIlluminance) Name() string                      { return "Min Measured Illuminance" }
func (MinMeasuredIlluminance) Readable() bool                    { return true }
func (MinMeasuredIlluminance) Writable() bool                    { return false }
func (MinMeasuredIlluminance) Reportable() bool                  { return true }
func (MinMeasuredIlluminance) SceneIndex() int                   { return -1 }
func (a *MinMeasuredIlluminance) Value() *MinMeasuredIlluminance { return a }
func (a MinMeasuredIlluminance) MarshalZcl() ([]byte, error)     { return zcl.Zu16(a).MarshalZcl() }

func (a *MinMeasuredIlluminance) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = MinMeasuredIlluminance(*nt)
	return br, err
}

func (a MinMeasuredIlluminance) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

// MaxMeasuredIlluminance is an autogenerated attribute in the IlluminanceMeasurement cluster
type MaxMeasuredIlluminance zcl.Zu16

const MaxMeasuredIlluminanceAttr zcl.AttrID = 2

func (MaxMeasuredIlluminance) ID() zcl.AttrID                    { return MaxMeasuredIlluminanceAttr }
func (MaxMeasuredIlluminance) Cluster() zcl.ClusterID            { return IlluminanceMeasurementID }
func (MaxMeasuredIlluminance) Name() string                      { return "Max Measured Illuminance" }
func (MaxMeasuredIlluminance) Readable() bool                    { return true }
func (MaxMeasuredIlluminance) Writable() bool                    { return false }
func (MaxMeasuredIlluminance) Reportable() bool                  { return false }
func (MaxMeasuredIlluminance) SceneIndex() int                   { return -1 }
func (a *MaxMeasuredIlluminance) Value() *MaxMeasuredIlluminance { return a }
func (a MaxMeasuredIlluminance) MarshalZcl() ([]byte, error)     { return zcl.Zu16(a).MarshalZcl() }

func (a *MaxMeasuredIlluminance) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = MaxMeasuredIlluminance(*nt)
	return br, err
}

func (a MaxMeasuredIlluminance) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

// IlluminanceTolerance is an autogenerated attribute in the IlluminanceMeasurement cluster
type IlluminanceTolerance zcl.Zu16

const IlluminanceToleranceAttr zcl.AttrID = 3

func (IlluminanceTolerance) ID() zcl.AttrID                  { return IlluminanceToleranceAttr }
func (IlluminanceTolerance) Cluster() zcl.ClusterID          { return IlluminanceMeasurementID }
func (IlluminanceTolerance) Name() string                    { return "Illuminance Tolerance" }
func (IlluminanceTolerance) Readable() bool                  { return true }
func (IlluminanceTolerance) Writable() bool                  { return false }
func (IlluminanceTolerance) Reportable() bool                { return false }
func (IlluminanceTolerance) SceneIndex() int                 { return -1 }
func (a *IlluminanceTolerance) Value() *IlluminanceTolerance { return a }
func (a IlluminanceTolerance) MarshalZcl() ([]byte, error)   { return zcl.Zu16(a).MarshalZcl() }

func (a *IlluminanceTolerance) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = IlluminanceTolerance(*nt)
	return br, err
}

func (a IlluminanceTolerance) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

// LightSensorType is an autogenerated attribute in the IlluminanceMeasurement cluster
type LightSensorType zcl.Zenum8

const LightSensorTypeAttr zcl.AttrID = 4

func (LightSensorType) ID() zcl.AttrID                { return LightSensorTypeAttr }
func (LightSensorType) Cluster() zcl.ClusterID        { return IlluminanceMeasurementID }
func (LightSensorType) Name() string                  { return "Light Sensor Type" }
func (LightSensorType) Readable() bool                { return true }
func (LightSensorType) Writable() bool                { return false }
func (LightSensorType) Reportable() bool              { return false }
func (LightSensorType) SceneIndex() int               { return -1 }
func (a *LightSensorType) Value() *LightSensorType    { return a }
func (a LightSensorType) MarshalZcl() ([]byte, error) { return zcl.Zenum8(a).MarshalZcl() }

func (a *LightSensorType) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zenum8)
	br, err := nt.UnmarshalZcl(b)
	*a = LightSensorType(*nt)
	return br, err
}

func (a LightSensorType) String() string {
	switch a {
	case 0x00:
		return "Photodiode"
	case 0x01:
		return "CMOS"
	case 0xFF:
		return "Unknown"
	}
	return zcl.Sprintf("%v", zcl.Zenum8(a))
}

// IsPhotodiode checks if LightSensorType equals the value for Photodiode (0x00)
func (a LightSensorType) IsPhotodiode() bool { return a == 0x00 }

// SetPhotodiode sets LightSensorType to Photodiode (0x00)
func (a *LightSensorType) SetPhotodiode() { *a = 0x00 }

// IsCmos checks if LightSensorType equals the value for CMOS (0x01)
func (a LightSensorType) IsCmos() bool { return a == 0x01 }

// SetCmos sets LightSensorType to CMOS (0x01)
func (a *LightSensorType) SetCmos() { *a = 0x01 }

// IsUnknown checks if LightSensorType equals the value for Unknown (0xFF)
func (a LightSensorType) IsUnknown() bool { return a == 0xFF }

// SetUnknown sets LightSensorType to Unknown (0xFF)
func (a *LightSensorType) SetUnknown() { *a = 0xFF }

// Hysteresis is an autogenerated attribute in the IlluminanceMeasurement cluster
type Hysteresis zcl.Zu16

const HysteresisAttr zcl.AttrID = 61440

func (Hysteresis) ID() zcl.AttrID                { return HysteresisAttr }
func (Hysteresis) Cluster() zcl.ClusterID        { return IlluminanceMeasurementID }
func (Hysteresis) Name() string                  { return "Hysteresis" }
func (Hysteresis) Readable() bool                { return true }
func (Hysteresis) Writable() bool                { return true }
func (Hysteresis) Reportable() bool              { return false }
func (Hysteresis) SceneIndex() int               { return -1 }
func (a *Hysteresis) Value() *Hysteresis         { return a }
func (a Hysteresis) MarshalZcl() ([]byte, error) { return zcl.Zu16(a).MarshalZcl() }

func (a *Hysteresis) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = Hysteresis(*nt)
	return br, err
}

func (a Hysteresis) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

// MaxUpSpeed is an autogenerated attribute in the IlluminanceMeasurement cluster
// Maximum up adjustment speed in 1/10 seconds.
type MaxUpSpeed zcl.Zu16

const MaxUpSpeedAttr zcl.AttrID = 61441

func (MaxUpSpeed) ID() zcl.AttrID                { return MaxUpSpeedAttr }
func (MaxUpSpeed) Cluster() zcl.ClusterID        { return IlluminanceMeasurementID }
func (MaxUpSpeed) Name() string                  { return "Max Up Speed" }
func (MaxUpSpeed) Readable() bool                { return true }
func (MaxUpSpeed) Writable() bool                { return true }
func (MaxUpSpeed) Reportable() bool              { return false }
func (MaxUpSpeed) SceneIndex() int               { return -1 }
func (a *MaxUpSpeed) Value() *MaxUpSpeed         { return a }
func (a MaxUpSpeed) MarshalZcl() ([]byte, error) { return zcl.Zu16(a).MarshalZcl() }

func (a *MaxUpSpeed) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = MaxUpSpeed(*nt)
	return br, err
}

func (a MaxUpSpeed) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

// MaxDownSpeed is an autogenerated attribute in the IlluminanceMeasurement cluster
// Maximum down adjustment speed in 1/10 seconds.
type MaxDownSpeed zcl.Zu16

const MaxDownSpeedAttr zcl.AttrID = 61442

func (MaxDownSpeed) ID() zcl.AttrID                { return MaxDownSpeedAttr }
func (MaxDownSpeed) Cluster() zcl.ClusterID        { return IlluminanceMeasurementID }
func (MaxDownSpeed) Name() string                  { return "Max Down Speed" }
func (MaxDownSpeed) Readable() bool                { return true }
func (MaxDownSpeed) Writable() bool                { return true }
func (MaxDownSpeed) Reportable() bool              { return false }
func (MaxDownSpeed) SceneIndex() int               { return -1 }
func (a *MaxDownSpeed) Value() *MaxDownSpeed       { return a }
func (a MaxDownSpeed) MarshalZcl() ([]byte, error) { return zcl.Zu16(a).MarshalZcl() }

func (a *MaxDownSpeed) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = MaxDownSpeed(*nt)
	return br, err
}

func (a MaxDownSpeed) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

// TargetValue is an autogenerated attribute in the IlluminanceMeasurement cluster
// Target value in Lux which should be kept.
type TargetValue zcl.Zu16

const TargetValueAttr zcl.AttrID = 61443

func (TargetValue) ID() zcl.AttrID                { return TargetValueAttr }
func (TargetValue) Cluster() zcl.ClusterID        { return IlluminanceMeasurementID }
func (TargetValue) Name() string                  { return "Target Value" }
func (TargetValue) Readable() bool                { return true }
func (TargetValue) Writable() bool                { return true }
func (TargetValue) Reportable() bool              { return false }
func (TargetValue) SceneIndex() int               { return -1 }
func (a *TargetValue) Value() *TargetValue        { return a }
func (a TargetValue) MarshalZcl() ([]byte, error) { return zcl.Zu16(a).MarshalZcl() }

func (a *TargetValue) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = TargetValue(*nt)
	return br, err
}

func (a TargetValue) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

// StartupType is an autogenerated attribute in the IlluminanceMeasurement cluster
// Brightness control startup type.
type StartupType zcl.Zenum8

const StartupTypeAttr zcl.AttrID = 61444

func (StartupType) ID() zcl.AttrID                { return StartupTypeAttr }
func (StartupType) Cluster() zcl.ClusterID        { return IlluminanceMeasurementID }
func (StartupType) Name() string                  { return "Startup Type" }
func (StartupType) Readable() bool                { return true }
func (StartupType) Writable() bool                { return true }
func (StartupType) Reportable() bool              { return false }
func (StartupType) SceneIndex() int               { return -1 }
func (a *StartupType) Value() *StartupType        { return a }
func (a StartupType) MarshalZcl() ([]byte, error) { return zcl.Zenum8(a).MarshalZcl() }

func (a *StartupType) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zenum8)
	br, err := nt.UnmarshalZcl(b)
	*a = StartupType(*nt)
	return br, err
}

func (a StartupType) String() string {
	switch a {
	case 0x00:
		return "Default Level"
	case 0x01:
		return "Zero Level"
	}
	return zcl.Sprintf("%v", zcl.Zenum8(a))
}

// IsDefaultLevel checks if StartupType equals the value for Default Level (0x00)
func (a StartupType) IsDefaultLevel() bool { return a == 0x00 }

// SetDefaultLevel sets StartupType to Default Level (0x00)
func (a *StartupType) SetDefaultLevel() { *a = 0x00 }

// IsZeroLevel checks if StartupType equals the value for Zero Level (0x01)
func (a StartupType) IsZeroLevel() bool { return a == 0x01 }

// SetZeroLevel sets StartupType to Zero Level (0x01)
func (a *StartupType) SetZeroLevel() { *a = 0x01 }

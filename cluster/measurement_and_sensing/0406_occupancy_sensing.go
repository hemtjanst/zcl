package measurement_and_sensing

import (
	"hemtjan.st/zcl"
)

// OccupancySensing
const OccupancySensingID zcl.ClusterID = 1030

var OccupancySensingCluster = zcl.Cluster{
	ServerCmd: map[zcl.CommandID]func() zcl.Command{},
	ClientCmd: map[zcl.CommandID]func() zcl.Command{},
	ServerAttr: map[zcl.AttrID]func() zcl.Attr{
		OccupancyAttr:                               func() zcl.Attr { return new(Occupancy) },
		OccupancySensorTypeAttr:                     func() zcl.Attr { return new(OccupancySensorType) },
		PirOccupiedToUnoccupiedDelayAttr:            func() zcl.Attr { return new(PirOccupiedToUnoccupiedDelay) },
		PirUnoccupiedToOccupiedDelayAttr:            func() zcl.Attr { return new(PirUnoccupiedToOccupiedDelay) },
		PirUnoccupiedToOccupiedThresholdAttr:        func() zcl.Attr { return new(PirUnoccupiedToOccupiedThreshold) },
		UltrasonicOccupiedToUnoccupiedDelayAttr:     func() zcl.Attr { return new(UltrasonicOccupiedToUnoccupiedDelay) },
		UltrasonicUnoccupiedToOccupiedDelayAttr:     func() zcl.Attr { return new(UltrasonicUnoccupiedToOccupiedDelay) },
		UltrasonicUnoccupiedToOccupiedThresholdAttr: func() zcl.Attr { return new(UltrasonicUnoccupiedToOccupiedThreshold) },
		SensitivityAttr:                             func() zcl.Attr { return new(Sensitivity) },
		SensitivityMaxAttr:                          func() zcl.Attr { return new(SensitivityMax) },
	},
	ClientAttr: map[zcl.AttrID]func() zcl.Attr{},
	SceneAttr:  []zcl.AttrID{},
}

// Occupancy is an autogenerated attribute in the OccupancySensing cluster
type Occupancy zcl.Zbmp8

const OccupancyAttr zcl.AttrID = 0

func (Occupancy) ID() zcl.AttrID                { return OccupancyAttr }
func (Occupancy) Cluster() zcl.ClusterID        { return OccupancySensingID }
func (Occupancy) Name() string                  { return "Occupancy" }
func (Occupancy) Readable() bool                { return true }
func (Occupancy) Writable() bool                { return false }
func (Occupancy) Reportable() bool              { return true }
func (Occupancy) SceneIndex() int               { return -1 }
func (a *Occupancy) Value() *Occupancy          { return a }
func (a Occupancy) MarshalZcl() ([]byte, error) { return zcl.Zbmp8(a).MarshalZcl() }

func (a *Occupancy) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zbmp8)
	br, err := nt.UnmarshalZcl(b)
	*a = Occupancy(*nt)
	return br, err
}

func (a Occupancy) String() string {
	return zcl.Sprintf("%v", zcl.Zbmp8(a))
}

// OccupancySensorType is an autogenerated attribute in the OccupancySensing cluster
type OccupancySensorType zcl.Zenum8

const OccupancySensorTypeAttr zcl.AttrID = 1

func (OccupancySensorType) ID() zcl.AttrID                 { return OccupancySensorTypeAttr }
func (OccupancySensorType) Cluster() zcl.ClusterID         { return OccupancySensingID }
func (OccupancySensorType) Name() string                   { return "Occupancy Sensor Type" }
func (OccupancySensorType) Readable() bool                 { return true }
func (OccupancySensorType) Writable() bool                 { return false }
func (OccupancySensorType) Reportable() bool               { return false }
func (OccupancySensorType) SceneIndex() int                { return -1 }
func (a *OccupancySensorType) Value() *OccupancySensorType { return a }
func (a OccupancySensorType) MarshalZcl() ([]byte, error)  { return zcl.Zenum8(a).MarshalZcl() }

func (a *OccupancySensorType) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zenum8)
	br, err := nt.UnmarshalZcl(b)
	*a = OccupancySensorType(*nt)
	return br, err
}

func (a OccupancySensorType) String() string {
	switch a {
	case 0x00:
		return "PIR"
	case 0x01:
		return "Ultrasonic"
	case 0x02:
		return "PIR and ultrasonic"
	}
	return zcl.Sprintf("%v", zcl.Zenum8(a))
}

// IsPir checks if OccupancySensorType equals the value for PIR (0x00)
func (a OccupancySensorType) IsPir() bool { return a == 0x00 }

// SetPir sets OccupancySensorType to PIR (0x00)
func (a *OccupancySensorType) SetPir() { *a = 0x00 }

// IsUltrasonic checks if OccupancySensorType equals the value for Ultrasonic (0x01)
func (a OccupancySensorType) IsUltrasonic() bool { return a == 0x01 }

// SetUltrasonic sets OccupancySensorType to Ultrasonic (0x01)
func (a *OccupancySensorType) SetUltrasonic() { *a = 0x01 }

// IsPirAndUltrasonic checks if OccupancySensorType equals the value for PIR and ultrasonic (0x02)
func (a OccupancySensorType) IsPirAndUltrasonic() bool { return a == 0x02 }

// SetPirAndUltrasonic sets OccupancySensorType to PIR and ultrasonic (0x02)
func (a *OccupancySensorType) SetPirAndUltrasonic() { *a = 0x02 }

// PirOccupiedToUnoccupiedDelay is an autogenerated attribute in the OccupancySensing cluster
// The PIROccupiedToUnoccupiedDelay attribute is 16-bits in length and specifies the time delay, in seconds, before the PIR sensor changes to its occupied state when the sensed area becomes unoccupied. This attribute, along with PIRUnoccupiedToOccupiedTime, may be used to reduce sensor 'chatter' when used in an area where occupation changes frequently.
type PirOccupiedToUnoccupiedDelay zcl.Zu16

const PirOccupiedToUnoccupiedDelayAttr zcl.AttrID = 16

func (PirOccupiedToUnoccupiedDelay) ID() zcl.AttrID                          { return PirOccupiedToUnoccupiedDelayAttr }
func (PirOccupiedToUnoccupiedDelay) Cluster() zcl.ClusterID                  { return OccupancySensingID }
func (PirOccupiedToUnoccupiedDelay) Name() string                            { return "PIR Occupied To Unoccupied Delay" }
func (PirOccupiedToUnoccupiedDelay) Readable() bool                          { return true }
func (PirOccupiedToUnoccupiedDelay) Writable() bool                          { return true }
func (PirOccupiedToUnoccupiedDelay) Reportable() bool                        { return false }
func (PirOccupiedToUnoccupiedDelay) SceneIndex() int                         { return -1 }
func (a *PirOccupiedToUnoccupiedDelay) Value() *PirOccupiedToUnoccupiedDelay { return a }
func (a PirOccupiedToUnoccupiedDelay) MarshalZcl() ([]byte, error)           { return zcl.Zu16(a).MarshalZcl() }

func (a *PirOccupiedToUnoccupiedDelay) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = PirOccupiedToUnoccupiedDelay(*nt)
	return br, err
}

func (a PirOccupiedToUnoccupiedDelay) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

// PirUnoccupiedToOccupiedDelay is an autogenerated attribute in the OccupancySensing cluster
// The PIRUnoccupiedToOccupiedDelay attribute is 16-bits in length and specifies the time delay, in seconds, before the PIR sensor changes to its unoccupied state when the sensed area becomes occupied.
type PirUnoccupiedToOccupiedDelay zcl.Zu16

const PirUnoccupiedToOccupiedDelayAttr zcl.AttrID = 17

func (PirUnoccupiedToOccupiedDelay) ID() zcl.AttrID                          { return PirUnoccupiedToOccupiedDelayAttr }
func (PirUnoccupiedToOccupiedDelay) Cluster() zcl.ClusterID                  { return OccupancySensingID }
func (PirUnoccupiedToOccupiedDelay) Name() string                            { return "PIR Unoccupied To Occupied Delay" }
func (PirUnoccupiedToOccupiedDelay) Readable() bool                          { return true }
func (PirUnoccupiedToOccupiedDelay) Writable() bool                          { return true }
func (PirUnoccupiedToOccupiedDelay) Reportable() bool                        { return false }
func (PirUnoccupiedToOccupiedDelay) SceneIndex() int                         { return -1 }
func (a *PirUnoccupiedToOccupiedDelay) Value() *PirUnoccupiedToOccupiedDelay { return a }
func (a PirUnoccupiedToOccupiedDelay) MarshalZcl() ([]byte, error)           { return zcl.Zu16(a).MarshalZcl() }

func (a *PirUnoccupiedToOccupiedDelay) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = PirUnoccupiedToOccupiedDelay(*nt)
	return br, err
}

func (a PirUnoccupiedToOccupiedDelay) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

// PirUnoccupiedToOccupiedThreshold is an autogenerated attribute in the OccupancySensing cluster
// The PIRUnoccupiedToOccupiedThreshold attribute is 8 bits in length and specifies the number of movement detection events that must occur in the period PIRUnoccupiedToOccupiedDelay, before the PIR sensor changes to its occupied state
type PirUnoccupiedToOccupiedThreshold zcl.Zu8

const PirUnoccupiedToOccupiedThresholdAttr zcl.AttrID = 18

func (PirUnoccupiedToOccupiedThreshold) ID() zcl.AttrID                              { return PirUnoccupiedToOccupiedThresholdAttr }
func (PirUnoccupiedToOccupiedThreshold) Cluster() zcl.ClusterID                      { return OccupancySensingID }
func (PirUnoccupiedToOccupiedThreshold) Name() string                                { return "PIR Unoccupied To Occupied Threshold" }
func (PirUnoccupiedToOccupiedThreshold) Readable() bool                              { return true }
func (PirUnoccupiedToOccupiedThreshold) Writable() bool                              { return true }
func (PirUnoccupiedToOccupiedThreshold) Reportable() bool                            { return false }
func (PirUnoccupiedToOccupiedThreshold) SceneIndex() int                             { return -1 }
func (a *PirUnoccupiedToOccupiedThreshold) Value() *PirUnoccupiedToOccupiedThreshold { return a }
func (a PirUnoccupiedToOccupiedThreshold) MarshalZcl() ([]byte, error)               { return zcl.Zu8(a).MarshalZcl() }

func (a *PirUnoccupiedToOccupiedThreshold) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu8)
	br, err := nt.UnmarshalZcl(b)
	*a = PirUnoccupiedToOccupiedThreshold(*nt)
	return br, err
}

func (a PirUnoccupiedToOccupiedThreshold) String() string {
	return zcl.Sprintf("%v", zcl.Zu8(a))
}

// UltrasonicOccupiedToUnoccupiedDelay is an autogenerated attribute in the OccupancySensing cluster
// The UltraSonicOccupiedToUnoccupiedTime attribute specifies the time delay, in seconds, before the ultrasonic sensor changes to its occupied state when the sensed area becomes unoccupied. This attribute, along with UltraSonicUnoccupiedToOccupiedTime, may be used to reduce sensor 'chatter' when used in an area where occupation changes frequently.
type UltrasonicOccupiedToUnoccupiedDelay zcl.Zu16

const UltrasonicOccupiedToUnoccupiedDelayAttr zcl.AttrID = 32

func (UltrasonicOccupiedToUnoccupiedDelay) ID() zcl.AttrID {
	return UltrasonicOccupiedToUnoccupiedDelayAttr
}
func (UltrasonicOccupiedToUnoccupiedDelay) Cluster() zcl.ClusterID { return OccupancySensingID }
func (UltrasonicOccupiedToUnoccupiedDelay) Name() string {
	return "Ultrasonic Occupied To Unoccupied Delay"
}
func (UltrasonicOccupiedToUnoccupiedDelay) Readable() bool                                 { return true }
func (UltrasonicOccupiedToUnoccupiedDelay) Writable() bool                                 { return true }
func (UltrasonicOccupiedToUnoccupiedDelay) Reportable() bool                               { return false }
func (UltrasonicOccupiedToUnoccupiedDelay) SceneIndex() int                                { return -1 }
func (a *UltrasonicOccupiedToUnoccupiedDelay) Value() *UltrasonicOccupiedToUnoccupiedDelay { return a }
func (a UltrasonicOccupiedToUnoccupiedDelay) MarshalZcl() ([]byte, error) {
	return zcl.Zu16(a).MarshalZcl()
}

func (a *UltrasonicOccupiedToUnoccupiedDelay) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = UltrasonicOccupiedToUnoccupiedDelay(*nt)
	return br, err
}

func (a UltrasonicOccupiedToUnoccupiedDelay) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

// UltrasonicUnoccupiedToOccupiedDelay is an autogenerated attribute in the OccupancySensing cluster
// The UltraSonicUnoccupiedToOccupiedTime attribute specifies the time delay, in seconds, before the ultrasonic sensor changes to its unoccupied state when the sensed area becomes occupied.
type UltrasonicUnoccupiedToOccupiedDelay zcl.Zu16

const UltrasonicUnoccupiedToOccupiedDelayAttr zcl.AttrID = 33

func (UltrasonicUnoccupiedToOccupiedDelay) ID() zcl.AttrID {
	return UltrasonicUnoccupiedToOccupiedDelayAttr
}
func (UltrasonicUnoccupiedToOccupiedDelay) Cluster() zcl.ClusterID { return OccupancySensingID }
func (UltrasonicUnoccupiedToOccupiedDelay) Name() string {
	return "Ultrasonic Unoccupied To Occupied Delay"
}
func (UltrasonicUnoccupiedToOccupiedDelay) Readable() bool                                 { return true }
func (UltrasonicUnoccupiedToOccupiedDelay) Writable() bool                                 { return true }
func (UltrasonicUnoccupiedToOccupiedDelay) Reportable() bool                               { return false }
func (UltrasonicUnoccupiedToOccupiedDelay) SceneIndex() int                                { return -1 }
func (a *UltrasonicUnoccupiedToOccupiedDelay) Value() *UltrasonicUnoccupiedToOccupiedDelay { return a }
func (a UltrasonicUnoccupiedToOccupiedDelay) MarshalZcl() ([]byte, error) {
	return zcl.Zu16(a).MarshalZcl()
}

func (a *UltrasonicUnoccupiedToOccupiedDelay) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu16)
	br, err := nt.UnmarshalZcl(b)
	*a = UltrasonicUnoccupiedToOccupiedDelay(*nt)
	return br, err
}

func (a UltrasonicUnoccupiedToOccupiedDelay) String() string {
	return zcl.Sprintf("%v", zcl.Zu16(a))
}

// UltrasonicUnoccupiedToOccupiedThreshold is an autogenerated attribute in the OccupancySensing cluster
// The UltrasonicUnoccupiedToOccupiedThreshold attribute is 8 bits in length and specifies the number of movement detection events that must occur in the period UltrasonicUnoccupiedToOccupiedDelay, before the Ultrasonic sensor changes to its occupied state
type UltrasonicUnoccupiedToOccupiedThreshold zcl.Zu8

const UltrasonicUnoccupiedToOccupiedThresholdAttr zcl.AttrID = 34

func (UltrasonicUnoccupiedToOccupiedThreshold) ID() zcl.AttrID {
	return UltrasonicUnoccupiedToOccupiedThresholdAttr
}
func (UltrasonicUnoccupiedToOccupiedThreshold) Cluster() zcl.ClusterID { return OccupancySensingID }
func (UltrasonicUnoccupiedToOccupiedThreshold) Name() string {
	return "Ultrasonic Unoccupied To Occupied Threshold"
}
func (UltrasonicUnoccupiedToOccupiedThreshold) Readable() bool   { return true }
func (UltrasonicUnoccupiedToOccupiedThreshold) Writable() bool   { return true }
func (UltrasonicUnoccupiedToOccupiedThreshold) Reportable() bool { return false }
func (UltrasonicUnoccupiedToOccupiedThreshold) SceneIndex() int  { return -1 }
func (a *UltrasonicUnoccupiedToOccupiedThreshold) Value() *UltrasonicUnoccupiedToOccupiedThreshold {
	return a
}
func (a UltrasonicUnoccupiedToOccupiedThreshold) MarshalZcl() ([]byte, error) {
	return zcl.Zu8(a).MarshalZcl()
}

func (a *UltrasonicUnoccupiedToOccupiedThreshold) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu8)
	br, err := nt.UnmarshalZcl(b)
	*a = UltrasonicUnoccupiedToOccupiedThreshold(*nt)
	return br, err
}

func (a UltrasonicUnoccupiedToOccupiedThreshold) String() string {
	return zcl.Sprintf("%v", zcl.Zu8(a))
}

// Sensitivity is an autogenerated attribute in the OccupancySensing cluster
type Sensitivity zcl.Zu8

const SensitivityAttr zcl.AttrID = 48

func (Sensitivity) ID() zcl.AttrID                { return SensitivityAttr }
func (Sensitivity) Cluster() zcl.ClusterID        { return OccupancySensingID }
func (Sensitivity) Name() string                  { return "Sensitivity" }
func (Sensitivity) Readable() bool                { return true }
func (Sensitivity) Writable() bool                { return true }
func (Sensitivity) Reportable() bool              { return false }
func (Sensitivity) SceneIndex() int               { return -1 }
func (a *Sensitivity) Value() *Sensitivity        { return a }
func (a Sensitivity) MarshalZcl() ([]byte, error) { return zcl.Zu8(a).MarshalZcl() }

func (a *Sensitivity) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu8)
	br, err := nt.UnmarshalZcl(b)
	*a = Sensitivity(*nt)
	return br, err
}

func (a Sensitivity) String() string {
	return zcl.Sprintf("%v", zcl.Zu8(a))
}

// SensitivityMax is an autogenerated attribute in the OccupancySensing cluster
type SensitivityMax zcl.Zu8

const SensitivityMaxAttr zcl.AttrID = 49

func (SensitivityMax) ID() zcl.AttrID                { return SensitivityMaxAttr }
func (SensitivityMax) Cluster() zcl.ClusterID        { return OccupancySensingID }
func (SensitivityMax) Name() string                  { return "Sensitivity max." }
func (SensitivityMax) Readable() bool                { return true }
func (SensitivityMax) Writable() bool                { return true }
func (SensitivityMax) Reportable() bool              { return false }
func (SensitivityMax) SceneIndex() int               { return -1 }
func (a *SensitivityMax) Value() *SensitivityMax     { return a }
func (a SensitivityMax) MarshalZcl() ([]byte, error) { return zcl.Zu8(a).MarshalZcl() }

func (a *SensitivityMax) UnmarshalZcl(b []byte) ([]byte, error) {
	nt := new(zcl.Zu8)
	br, err := nt.UnmarshalZcl(b)
	*a = SensitivityMax(*nt)
	return br, err
}

func (a SensitivityMax) String() string {
	return zcl.Sprintf("%v", zcl.Zu8(a))
}
